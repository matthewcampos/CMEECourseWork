hist(bestChrom,breaks=100)
phone1=8584651990
phone2=6197876543
phone3=8587678976
print(phone1)
print(phone2)
print(phone3)
phone_numbers=c(phone1,phone2,phone3)
print(phone_numbers)
for (i in 1:3){
print(phone_numbers[i])
}
for (i in 1:3){
print(c(phone_numbers[i],i))
}
#Question 8
vector=c(100:70)
vector
for (i in 1:30){
if (i==3){
vector[-i]
}if (i==11){
vector[-i]
}if (i==17){
vector[-i]
}
print(vector)
}
for (i in 1:30){
if (i==3){
vector[-i]
}if (i==11){
vector[-i]
}if (i==17){
vector[-i]
}
}
for (i in 1:30){
if (i==3){
vector[-i]
}
if (i==11){
vector[-i]
}
if (i==17){
vector[-i]
}
}
print(vector)
for (i in 1:30){
if (i==3){
vector[-i]
}
if (i==11){
vector[-i]
}
if (i==17){
vector[-i]
}
print(vector)
}
for (i in 1:30){
if (i==3){
vector=vector[-i]
}
if (i==11){
vector=vector[-i]
}
if (i==17){
vector=vector[-i]
}
}
print(vector)
for (i in 1:30){
if (i==3){
vector=vector[-i]
}
if (i==11){
vector=vector[-i]
}
if (i==17){
vector=vector[-i]
}
print(vector[12])
}
for (i in 1:30){
if (i==3){
vector=vector[-i]
}
if (i==11){
vector=vector[-i]
}
if (i==17){
vector=vector[-i]
}
}
print(vector[12])
vector=c(100:70)
vector
for (i in 1:30){
q=q+vector[i]
}
print(q)
h=0
for (i in 100:70)
{
h <- h + i
}
print(h)
q=0
for (i in 1:30){
q=q+vector[i]
}
print(q)
newvec=c(12:65)
newvec
for (i in 1:55){
if (newvec[i]==32)
}
print(c(i),newvec[i])
for (i in 1:55){
if (newvec[i]==32){
print(c(i),newvec[i])
}
}
for (i in 1:55){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
for (i in 1:55){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
newvec[21]==32
newvec[20]==32)
newvec[20]==32
for (i in 1:55){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
for (i in 1:54){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
mylength=function(x){
count=0
for (i in x){
count=count+1
}
}
x=c(100:70)
x
length(x)
mylength(x)
mylength=function(x){
count=0
for (i in x){
count=count+1
}
return(count)
}
mylength(x)
mymean=function(x){
for (i in x){
mean=sum(x)/mylength(x)
}
return(mean)
}
mymean(x)
mean(x)
myvariance=function(x){
mean=mymean(x)
length=mylength(x)
c=c()
for (i in x){
c=c(c,(i-mean)^2)
}
variance=sum(c)/(length-1)
return(variance)
}
myvariance(x)
myVariance(x)
mymin=function(x){
small=x[1]
for (i in x){
if (i< x[1]){
small=i
}
}
}
mymin(x)
mymin=function(x){
small=x[1]
for (i in x){
if (i< x[1]){
small=i
}
}
return(small)
}
mymin(x)
myMin(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
c=c+1
if (i< x[1]){
small=i
}
}
return(c(small,c))
}
mymin(x)
mymax=function(x){
big=x[1]
c=0
for (i in x){
c=c+1
if (i>x[1]){
big=i
}
}
return(c(big,c))
}
mymax(x)
myMax(x)
mymax=function(x){
big=x[1]
c=0
for (i in x){
if (i>x[1]){
big=i
}
}
for (t in x){
if (t==big){
c=c+1
}
}
return(c(big,c))
}
mymax(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
if (i< x[1]){
small=i
}
}
for (t in x){
if (t==big){
c=c+1
}
}
return(c(big,c))
}
mysecondsmallest=function(x){
small=mymin(x)
x(-small)
y=mymin(x)
}
mysecondsmallest(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
if (i< x[1]){
small=i
}
}
for (t in x){
if (t==small){
c=c+1
}
}
return(c(big,c))
}
mysecondsmallest=function(x){
smol=mymin(x)
x(-smol)
y=mymin(x)
}
mysecondsmallest(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
if (i< x[1]){
small=i
}
}
for (t in x){
if (t==small){
c=c+1
}
}
return(c(small,c))
}
mysecondsmallest(x)
x
mysecondsmallest=function(x){
smol=mymin(x)
bg=mymax(x)
for (i in x){
if (i==smol){
i=bg
}
}
y=mymin(x)
}
mysecondsmallest(x)
warnings()
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in x){
if (i==smol){
i=bg
}
}
y=mymin(x)
}
mysecondsmallest(x)
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in x){
if (i==smol){
i=bg
}
}
y=mymin(x)
return(y)
}
mysecondsmallest(x)
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in x){
if (i==smol){
i=bg
}
y=mymin(x)
}
return(y)
}
mysecondsmallest(x)
smol=mymin(x)[1]
smol
bg=mymax(x)[1]
bg
x
for (i in x){
if (i==smol){
i=bg
}
y=mymin(x)
}
x
i
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in 1:mylength(x)){
if (x[i]==smol){
x[i]=bg
}
y=mymin(x)
}
return(y)
}
mysecondsmallest(x)
x
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in 1:mylength(x)){
if (x[i]==smol){
x[i]=bg
}
y=mymin(x)[1]
}
return(y)
}
x= numeric(Number_of_urns)
x
results= ceiling(runif(Number_of_balls,0,Number_of_urns))
results
pops
pop1<-list(lat=19,long=57,
pop=c(100,101,99))
pop2<-list(lat=56,long=-120,
pop=c(1,4,7,7,2,1,2))
pop3<-list(lat=32,long=-10,
pop=c(12,11,2,1,14))
pops<-list(sp1=pop1,sp2=pop2,sp3=pop3)
pops
pops[1]
pops[[1]]
pops[[1,1]]
pops[1,1]
pops[1][1]
pops[[1][1]]
pops[[1,1]]
require(minpack.lm)
powMod <- function(x, a, b){
return(a*x^b)
}
MyData <- read.csv("../Data/GenomeSize.csv")
head(MyData)
Data2Fit <- subset(MyData, Suborder=="Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] #remove NA's
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
library(ggplot2)
ggplot(Data2Fit, aes(x= TotalLength, y= BodyWeight)) +
geom_point(size=(3), color="red") + theme_bw() +
labs(y="Body mass (mg)", x="Wing Length (mm)")
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b), data = Data2Fit, start = list(a = .1, b = .1)) #have to manually enter values for a&b
summary(PowFit)
Lengths <- seq(min(Data2Fit$TotalLength),max(Data2Fit$TotalLength),len=200) #generates regular sequence
coef(PowFit)["a"] #retrieves coefficients
coef(PowFit)["b"]
require(minpack.lm)
powMod <- function(x, a, b){
return(a*x^b)
}
MyData <- read.csv("../Data/GenomeSize.csv")
head(MyData)
Data2Fit <- subset(MyData, Suborder=="Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] #remove NA's
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
library(ggplot2)
ggplot(Data2Fit, aes(x= TotalLength, y= BodyWeight)) +
geom_point(size=(3), color="red") + theme_bw() +
labs(y="Body mass (mg)", x="Wing Length (mm)")
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b), data = Data2Fit, start = list(a = .1, b = .1)) #have to manually enter values for a&b
summary(PowFit)
Lengths <- seq(min(Data2Fit$TotalLength),max(Data2Fit$TotalLength),len=200) #generates regular sequence
coef(PowFit)["a"] #retrieves coefficients
coef(PowFit)["b"]
Predic2PlotPow <- powMod(Lengths, coef(PowFit)["a"], coef(PowFit)["b"])
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight) #text(0.2,30, labels="3.94e-06*x^2.59"))
lines(Lengths, Predic2PlotPow, col = 'blue', lwd = 2.5)
#line_equation <- function(){
#eq <- substitute(italic(y) == a * italic(x)^b,
#list(a=coef(PowFit)["a"],
#b=coef(PowFit)["b"]))
#as.character(as.expression(eq))
#}
confint(PowFit) #computes confidence intervals for one or more parameters in a fitted model
require(minpack.lm)
powMod <- function(x, a, b){
return(a*x^b)
}
MyData <- read.csv("../Data/GenomeSize.csv")
head(MyData)
setwd("~/Documents/CMEECourseWork/Week5/Sandbox")
MyData <- read.csv("../Data/GenomeSize.csv")
head(MyData)
Data2Fit <- subset(MyData, Suborder=="Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] #remove NA's
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
library(ggplot2)
ggplot(Data2Fit, aes(x= TotalLength, y= BodyWeight)) +
geom_point(size=(3), color="red") + theme_bw() +
labs(y="Body mass (mg)", x="Wing Length (mm)")
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b), data = Data2Fit, start = list(a = .1, b = .1)) #have to manually enter values for a&b
summary(PowFit)
Lengths <- seq(min(Data2Fit$TotalLength),max(Data2Fit$TotalLength),len=200) #generates regular sequence
coef(PowFit)["a"] #retrieves coefficients
coef(PowFit)["b"]
Predic2PlotPow <- powMod(Lengths, coef(PowFit)["a"], coef(PowFit)["b"])
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight) #text(0.2,30, labels="3.94e-06*x^2.59"))
lines(Lengths, Predic2PlotPow, col = 'blue', lwd = 2.5)
#line_equation <- function(){
#eq <- substitute(italic(y) == a * italic(x)^b,
#list(a=coef(PowFit)["a"],
#b=coef(PowFit)["b"]))
#as.character(as.expression(eq))
#}
confint(PowFit) #computes confidence intervals for one or more parameters in a fitted model
#Comparing models
QuaFit <- lm(BodyWeight ~ poly(TotalLength,2), data = Data2Fit)
QualFit
QuaFit
data.frame(TotalLength=Lengths)
Predic2PlotQua <- predict.lm(QuaFit, data.frame(TotalLength=Lengths))
Predic2PlotQua
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow, col = 'blue', lwd = 2.5)
lines(Lengths, Predic2PlotQua, col = 'red', lwd = 2.5)
RSS_Pow <- sum(residuals(PowFit)^2)  # Residual sum of squares
TSS_Pow <- sum((Data2Fit$BodyWeight - mean(Data2Fit$BodyWeight))^2)  # Total sum of squares
RSq_Pow <- 1 - (RSS_Pow/TSS_Pow)  # R-squared value
RSS_Qua <- sum(residuals(QuaFit)^2)  # Residual sum of squares
TSS_Qua <- sum((Data2Fit$BodyWeight - mean(Data2Fit$BodyWeight))^2)  # Total sum of squares
RSq_Qua <- 1 - (RSS_Qua/TSS_Qua)  # R-squared value
RSq_Pow
RSq_Qua
n <- nrow(Data2Fit) #set sample size
pPow <- length(coef(PowFit)) # get number of parameters in power law model
pQua <- length(coef(QuaFit)) # get number of parameters in quadratic model
AIC_Pow <- n + 2 + n * log((2 * pi) / n) +  n * log(RSS_Pow) + 2 * pPow
AIC_Qua <- n + 2 + n * log((2 * pi) / n) + n * log(RSS_Qua) + 2 * pQua
AIC_Pow - AIC_Qua
AIC(PowFit) - AIC(QuaFit)
