print(h)
q=0
for (i in 1:30){
q=q+vector[i]
}
print(q)
newvec=c(12:65)
newvec
for (i in 1:55){
if (newvec[i]==32)
}
print(c(i),newvec[i])
for (i in 1:55){
if (newvec[i]==32){
print(c(i),newvec[i])
}
}
for (i in 1:55){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
for (i in 1:55){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
newvec[21]==32
newvec[20]==32)
newvec[20]==32
for (i in 1:55){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
for (i in 1:54){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
mylength=function(x){
count=0
for (i in x){
count=count+1
}
}
x=c(100:70)
x
length(x)
mylength(x)
mylength=function(x){
count=0
for (i in x){
count=count+1
}
return(count)
}
mylength(x)
mymean=function(x){
for (i in x){
mean=sum(x)/mylength(x)
}
return(mean)
}
mymean(x)
mean(x)
myvariance=function(x){
mean=mymean(x)
length=mylength(x)
c=c()
for (i in x){
c=c(c,(i-mean)^2)
}
variance=sum(c)/(length-1)
return(variance)
}
myvariance(x)
myVariance(x)
mymin=function(x){
small=x[1]
for (i in x){
if (i< x[1]){
small=i
}
}
}
mymin(x)
mymin=function(x){
small=x[1]
for (i in x){
if (i< x[1]){
small=i
}
}
return(small)
}
mymin(x)
myMin(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
c=c+1
if (i< x[1]){
small=i
}
}
return(c(small,c))
}
mymin(x)
mymax=function(x){
big=x[1]
c=0
for (i in x){
c=c+1
if (i>x[1]){
big=i
}
}
return(c(big,c))
}
mymax(x)
myMax(x)
mymax=function(x){
big=x[1]
c=0
for (i in x){
if (i>x[1]){
big=i
}
}
for (t in x){
if (t==big){
c=c+1
}
}
return(c(big,c))
}
mymax(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
if (i< x[1]){
small=i
}
}
for (t in x){
if (t==big){
c=c+1
}
}
return(c(big,c))
}
mysecondsmallest=function(x){
small=mymin(x)
x(-small)
y=mymin(x)
}
mysecondsmallest(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
if (i< x[1]){
small=i
}
}
for (t in x){
if (t==small){
c=c+1
}
}
return(c(big,c))
}
mysecondsmallest=function(x){
smol=mymin(x)
x(-smol)
y=mymin(x)
}
mysecondsmallest(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
if (i< x[1]){
small=i
}
}
for (t in x){
if (t==small){
c=c+1
}
}
return(c(small,c))
}
mysecondsmallest(x)
x
mysecondsmallest=function(x){
smol=mymin(x)
bg=mymax(x)
for (i in x){
if (i==smol){
i=bg
}
}
y=mymin(x)
}
mysecondsmallest(x)
warnings()
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in x){
if (i==smol){
i=bg
}
}
y=mymin(x)
}
mysecondsmallest(x)
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in x){
if (i==smol){
i=bg
}
}
y=mymin(x)
return(y)
}
mysecondsmallest(x)
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in x){
if (i==smol){
i=bg
}
y=mymin(x)
}
return(y)
}
mysecondsmallest(x)
smol=mymin(x)[1]
smol
bg=mymax(x)[1]
bg
x
for (i in x){
if (i==smol){
i=bg
}
y=mymin(x)
}
x
i
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in 1:mylength(x)){
if (x[i]==smol){
x[i]=bg
}
y=mymin(x)
}
return(y)
}
mysecondsmallest(x)
x
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in 1:mylength(x)){
if (x[i]==smol){
x[i]=bg
}
y=mymin(x)[1]
}
return(y)
}
x= numeric(Number_of_urns)
x
results= ceiling(runif(Number_of_balls,0,Number_of_urns))
results
ls()
rm(list=ls())
a<-4
a
a*a
a_squared<-a*a
sqrt(a_squared)
v<-c(0,1,2,3,4)
v
is.vector(v)
mean(v)
var(v)
median(v)
sum(v)
prod(v+1)
length(v)
len(v)
wing.width.cm<-1.2
wing.length.cm<-c(4.7,5.2,4.8)
x <- (1 + (2 * 3)
v<-TRUE
class(v)
v<-3.2
class(v)
v<-2L
class(v)
v<-"string"
class(v)
is.v
is.*
b<-NA
is.na(b)
b<-0/0
b
is.nan(b)
b<-5/10
b
b<-5/0
b
is.nan(b)
?is.nan
is.infinite(b)
is.finite(b)
is.finite(0/0)
as.integer(3.1)
as.numeric(4)
as.roman(155)
as.character(155)
as.logical(5)
as.logical(0)
1E4
1e4
5e-2
1e4^2
1/3/1e8
a<-5
is.vector(a)
class(a)
type(a)
v1<-c(0.02,0.5,1)
v2<-c("a","bc","def","ghij")
v3c(TRUE,TRUE,FALSE)
v3<-c(TRUE,TRUE,FALSE)
v1;v2;v3
mat1<-matrix(1:25,5,5)
mat1
mat1 <- matrix(1:25, 5, 5, byrow=TRUE)
mat1
dim(mat1)
v1<-c(0.02,TRUE,1)
v1
class(v1)
v1<-c(0.02,"mary",1)
v1
class(v1)
arr1<-array(1:50, c(5,5,2))
arr1[,,1]
arr1[,,2]
print(arr1)
Col1<-1:10
Col1
Col2<-LETTERS[1:10]
Col2
Col3<-runif
Col3<-runif(10)
Col3
MyDF<-data.frame(Col1,Col2,Col3)
print(MyDF)
names(MyDF)<-c("My First Column","My Second Column", "My.Third.Column")
MyDF
MyDF$`My First Column`
MyDF$`My Second Column`
MyDF$My Second Column
colnames(MyDF)
colnames(MyDF)[2]<-MySecondColumn
colnames(MyDF)[2]<-"MySecondColumn"
colnames(MyDF)[1]<-"MyFirstColumn"
MyDF$My.Third.Column
MyDF[,1]
MyDF[,2]
MyDF[,3]
MyDF[1,3]
MyDF[c("MyFirstColumn", "My.Third.Column")]
class(MyDF)
str(MyDF)
head(MyDF)
tail(MyDF)
a<-as.factor(c(1,2))
a
class(a)
levels(a)
class(MyDF)
class(MyDF$MySecondColumn)
MyDF$MySecondColumn<-as.character(MyDF$MySecondColumn)
class(MyDF$MySecondColumn)
str(MyDF)
MyList<-list(species=c("Quercus robur", "Franxinus excelsior"), age=c(123,84))
MyList
MyList[1]
MyList$species
MyList["Species"]
MyList["species"]
MyList["species[1"]
MyList["species[1]"]
MyList$species[1]
MyMat=matrix(1:8,4,4)
MyMat
MyDF=as.data.frame(MyMat)
MyDF
object.size(MyMat)
object.size(MyDF)
years<-1990:2009
years
years<-2009:1990
years
seq(1,10,0.5)
MyVar<-c(LETTERS[1:5])
MyVar
MyVar[1]
MyVar[4]
MyVar[c(3,2,1)]
mat1<-matrix(1:25,5,5,byrow=TRUE)
mat1
mat1[1:2,2:4]
mat1[1:2]
mat[1]
mat1[1]
mat[1,1]
mat1[1,1]
mat[1,2:4]
mat1[1,2:4]
mat1[,1:2]
mat1[1:2,]
mat1[1:2]
mat=matrix(1:25,5,5)
mat
mat[1:2]
mat[1:2,2:4]
mat[1:25]
v<-c(0,1,2,3,4)
v2<-v*2
v2
v*v2
t(v)
v
v<-c(0,1,2,3,4)
v
t(v)
v[1]
v<-t(v)
v[1]
v[1,1]
v&*&t(v)
v %*% t(v)
v<-c(0,1,2,3,4)
t(v)
v %*% t(v)
v3<-1:7
v3
v4<-c(v2,v3)
v4
species.name <- "Quercus robur"
species.name
paste("Quercus", "robur")
paste("Quercus", "robur", sep="")
paste("Quercus", "robur", sep=",")
paste('year is:', 1990:200)
paste('year is:', 1990:2000)
set.seed(1234567)
rnorm(1)
set.seed(1)
rnorm(1)
set.seed(1234567)
rnorm(10)
rnorm(11)
set.seed(1234567)
rnorm(11)
rnorm(10)
set.seed(1234567)
rnorm(1)
rnorm(10)
## run a simulation that involves sampling from a population
x<-rnorm(50) #Generate population
doit <- function(x){
x <- sample(x, replace=TRUE)
if (length(unique(x)) > 30) { #only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
}
result<- lapply(1:100, function(i) doit(x))
doit(1)
print(doit(1))
x
doit(x)
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100){
result[[i]] <- doit(x)
}
result
result <- vector("list", 100)
result
for(i in 1:100){
result[[i]] <- doit(x)
}
getwd()
setwd("~/Documents/CMEECourseWork/Week3/Code")
