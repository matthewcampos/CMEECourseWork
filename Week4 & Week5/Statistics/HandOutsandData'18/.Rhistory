for (q in 1:1300){
Results=c()
for (w in 1:130){
value_1=sample(Population_1[ , ,q],1,replace = FALSE,prob = NULL)
value_2=sample(competitor_pool[ , ,w],1,replace = FALSE,prob = NULL)
if (value_1>value_2){
Results=c(Results,Payoff-value_2)
} else if (value_2>value_1){
Results=c(Results,0-value_1)
}else if (value_1==value_2){
Results=c(Results,(Payoff/2)-value_1)
}
}
Bout[q]=mean(Results)
}
F_Result=c()
for (a in 1:1300){
b=min(Bout)
F_Result=c(F_Result, Bout[a]-b)
}
print(mean(F_Result))
New_Population=sample(c(1:1300),1300,replace = TRUE,prob = F_Result)
N_Population=array(0,dim=c(1,499,1300))
for (z in 1:1300){
N_Population[ , ,z]=Population[ , ,New_Population[z]]
}
y=Pop_fixation(N_Population)
if (y==TRUE){
break
}
}
which.max(F_Result)
F_Result[105]
which.max(F_Result)
bestChrom=N_Population[ , ,184]
chromName="RedemptionArcplayer3"
bestChrom=N_Population[ , ,105]
chromName="RedemptionArcplayer3"
source('http://labs.biology.ucsd.edu/rifkin/courses/bieb143/spr19/outputChrom3.R')
hist(RedemptionArcplayer3)
hist(bestChrom)
hist(bestChrom,breaks=100)
phone1=8584651990
phone2=6197876543
phone3=8587678976
print(phone1)
print(phone2)
print(phone3)
phone_numbers=c(phone1,phone2,phone3)
print(phone_numbers)
for (i in 1:3){
print(phone_numbers[i])
}
for (i in 1:3){
print(c(phone_numbers[i],i))
}
#Question 8
vector=c(100:70)
vector
for (i in 1:30){
if (i==3){
vector[-i]
}if (i==11){
vector[-i]
}if (i==17){
vector[-i]
}
print(vector)
}
for (i in 1:30){
if (i==3){
vector[-i]
}if (i==11){
vector[-i]
}if (i==17){
vector[-i]
}
}
for (i in 1:30){
if (i==3){
vector[-i]
}
if (i==11){
vector[-i]
}
if (i==17){
vector[-i]
}
}
print(vector)
for (i in 1:30){
if (i==3){
vector[-i]
}
if (i==11){
vector[-i]
}
if (i==17){
vector[-i]
}
print(vector)
}
for (i in 1:30){
if (i==3){
vector=vector[-i]
}
if (i==11){
vector=vector[-i]
}
if (i==17){
vector=vector[-i]
}
}
print(vector)
for (i in 1:30){
if (i==3){
vector=vector[-i]
}
if (i==11){
vector=vector[-i]
}
if (i==17){
vector=vector[-i]
}
print(vector[12])
}
for (i in 1:30){
if (i==3){
vector=vector[-i]
}
if (i==11){
vector=vector[-i]
}
if (i==17){
vector=vector[-i]
}
}
print(vector[12])
vector=c(100:70)
vector
for (i in 1:30){
q=q+vector[i]
}
print(q)
h=0
for (i in 100:70)
{
h <- h + i
}
print(h)
q=0
for (i in 1:30){
q=q+vector[i]
}
print(q)
newvec=c(12:65)
newvec
for (i in 1:55){
if (newvec[i]==32)
}
print(c(i),newvec[i])
for (i in 1:55){
if (newvec[i]==32){
print(c(i),newvec[i])
}
}
for (i in 1:55){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
for (i in 1:55){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
newvec[21]==32
newvec[20]==32)
newvec[20]==32
for (i in 1:55){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
for (i in 1:54){
if (newvec[i]==32){
print(c(i,newvec[i]))
}
}
mylength=function(x){
count=0
for (i in x){
count=count+1
}
}
x=c(100:70)
x
length(x)
mylength(x)
mylength=function(x){
count=0
for (i in x){
count=count+1
}
return(count)
}
mylength(x)
mymean=function(x){
for (i in x){
mean=sum(x)/mylength(x)
}
return(mean)
}
mymean(x)
mean(x)
myvariance=function(x){
mean=mymean(x)
length=mylength(x)
c=c()
for (i in x){
c=c(c,(i-mean)^2)
}
variance=sum(c)/(length-1)
return(variance)
}
myvariance(x)
myVariance(x)
mymin=function(x){
small=x[1]
for (i in x){
if (i< x[1]){
small=i
}
}
}
mymin(x)
mymin=function(x){
small=x[1]
for (i in x){
if (i< x[1]){
small=i
}
}
return(small)
}
mymin(x)
myMin(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
c=c+1
if (i< x[1]){
small=i
}
}
return(c(small,c))
}
mymin(x)
mymax=function(x){
big=x[1]
c=0
for (i in x){
c=c+1
if (i>x[1]){
big=i
}
}
return(c(big,c))
}
mymax(x)
myMax(x)
mymax=function(x){
big=x[1]
c=0
for (i in x){
if (i>x[1]){
big=i
}
}
for (t in x){
if (t==big){
c=c+1
}
}
return(c(big,c))
}
mymax(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
if (i< x[1]){
small=i
}
}
for (t in x){
if (t==big){
c=c+1
}
}
return(c(big,c))
}
mysecondsmallest=function(x){
small=mymin(x)
x(-small)
y=mymin(x)
}
mysecondsmallest(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
if (i< x[1]){
small=i
}
}
for (t in x){
if (t==small){
c=c+1
}
}
return(c(big,c))
}
mysecondsmallest=function(x){
smol=mymin(x)
x(-smol)
y=mymin(x)
}
mysecondsmallest(x)
mymin=function(x){
small=x[1]
c=0
for (i in x){
if (i< x[1]){
small=i
}
}
for (t in x){
if (t==small){
c=c+1
}
}
return(c(small,c))
}
mysecondsmallest(x)
x
mysecondsmallest=function(x){
smol=mymin(x)
bg=mymax(x)
for (i in x){
if (i==smol){
i=bg
}
}
y=mymin(x)
}
mysecondsmallest(x)
warnings()
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in x){
if (i==smol){
i=bg
}
}
y=mymin(x)
}
mysecondsmallest(x)
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in x){
if (i==smol){
i=bg
}
}
y=mymin(x)
return(y)
}
mysecondsmallest(x)
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in x){
if (i==smol){
i=bg
}
y=mymin(x)
}
return(y)
}
mysecondsmallest(x)
smol=mymin(x)[1]
smol
bg=mymax(x)[1]
bg
x
for (i in x){
if (i==smol){
i=bg
}
y=mymin(x)
}
x
i
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in 1:mylength(x)){
if (x[i]==smol){
x[i]=bg
}
y=mymin(x)
}
return(y)
}
mysecondsmallest(x)
x
mysecondsmallest=function(x){
smol=mymin(x)[1]
bg=mymax(x)[1]
for (i in 1:mylength(x)){
if (x[i]==smol){
x[i]=bg
}
y=mymin(x)[1]
}
return(y)
}
x= numeric(Number_of_urns)
x
results= ceiling(runif(Number_of_balls,0,Number_of_urns))
results
pops
pop1<-list(lat=19,long=57,
pop=c(100,101,99))
pop2<-list(lat=56,long=-120,
pop=c(1,4,7,7,2,1,2))
pop3<-list(lat=32,long=-10,
pop=c(12,11,2,1,14))
pops<-list(sp1=pop1,sp2=pop2,sp3=pop3)
pops
pops[1]
pops[[1]]
pops[[1,1]]
pops[1,1]
pops[1][1]
pops[[1][1]]
pops[[1,1]]
setwd("~/Documents/CMEECourseWork/Week4 & Week5/Statistics/HandOutsandData'18")
rm(list=ls())
d <- read.table("SparrowSize.txt", header=TRUE)
d
d1 <- subset(d, d$Wing!='NA')
summary(d1$Wing)
model1 <- lm(Wing~Sex.1 ,data=d1)
summary(model1)
boxplot(d1$Wing~d1$Sex.1, ylab="Wing Length (mm)")
anova(model1)
t.test(d1$Wing~d1$Sex, var.equal=TRUE)
boxplot(d1$Wing~d1$BirdID, ylab="Wing Length (mm)")
require(dplyr)
tbl_df(d1)
glimpse(d1)
d$Mass %>% cor.test(d$Tarsus, na.rm=TRUE)
d1 %>% group_by(BirdID) %>% summarise(count=length(BirdID))
d1 %>% group_by(d1$BirdID) %>% summarise(count=length(d1$BirdID))
d1 %>% group_by(BirdID) %>% summarise(count=length(BirdID))
count(d1, BirdID)
d1 %>% group_by(BirdID) %>% summarise(count=length(BirdID)) %>% count(d1, BirdID)
d1 %>% group_by(BirdID) %>% summarise(count=length(BirdID)) %>% count(count)
model3 <- lm(Wing~as.factor(Bird), data=d1)
model3 <- lm(Wing~as.factor(BirdID), data=d1)
d1
plot(d1$Wing~d1$BirdID)
plot(d1$Wing~as.factor(d1$BirdID))
anova(model3)
boxplot(d$Mass~d$Year)
m2 <- lm(d$Mass~as.factor(d$Year))
anova(m2)
d
summary(m2)
t(model.matrix(m2))
d2 <- subset(d, d$Year!=2000)
d2
model5 <- lm(d2$Mass~as.factor(d2$Year))
anova(model5)
summary(model5)
m2 <- lm(d$Mass~as.factor(d$Year))
anova(m2)
summary(m2)
rm(list=ls())
a <- read.table("ObserverRepeatability.txt", header=T)
a
require(dplyr)
a %>% group_by(StudentID) %>% summarise(count=length(StudentID))
a %>% group_by(StudentID) %>% summarise(count=length(StudentID)) %>% summarise(length(StudentID))
a %>% group_by(StudentID) %>% summarise(count=length(StudentID)) %>% summarise(sum(count)))
a %>% group_by(StudentID) %>% summarise(count=length(StudentID)) %>% summarise(sum(count))
a %>% group_by(StudentID) %>% summarise(count=length(StudentID)) %>% summarise(sum(count^2))
mod <- lm(Tarsus~StudentID, data=a)
anova(mod)
a
mod2 <- lm(Tarsus~Leg+Handedness+StudentID, data=a)
anova(mod2)
require(lme4)
lmm <_ lmer(Tarsus~Leg+Handedness+(1+|StudentID), data=a)
lmm <- lmer(Tarsus~Leg+Handedness+(1+|StudentID), data=a)
lmm <- lmer(Tarsus~Leg+Handedness+(1|StudentID), data=a)
summary(lmm)
