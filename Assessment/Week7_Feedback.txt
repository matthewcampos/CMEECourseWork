Starting weekly assessment for Matthew Paul, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 144.32 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Week7, Assessment, Genomics_and_Bioinformatics, HPC, Week2, Biological Data Structure and C Programming, GIS, .git, Computing Miniproject, Week3, Statistics

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
.DS_Store
*~
*.tmp
*.pyc
.Rhistory
_pycache_
.idea/
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
#CMEE Coursework Repository
###Week 1
**Sections covered**:
* Unix
* Shell script
* Version Control with Git
* Scientific Documentation with LATEX

###Week 2
**Sections covered**:
* Biological Computing in Python-I

###Week 3
**Sections covered**:
* Biological Computing in R
* Data management, exploration, and visualisation

###Week 4
**Sections covered**:
* Statistics
  - Lectures'18
  - HandOutsandData'18

###Week 5
**Sections covered**:
* Statistics
  - Lectures'18
  - HandOutsandData'18
* Computing Miniproject
* GIS
  - Data
  - Sandbox

###Week 6
**Sections covered**:
* Genomics_and_Bioinformatics
  - Alleles.R
  - Coalescence.R
  - Demography.R
  - Divergence.R

###Week 7
**Sections covered**:
* Biological Computing in Python-II

###Week 8
**Sections covered**:
* Computing Miniproject

###Week 9
**Sections covered**:
* HPC
  - mlc19_HPC_2019_main.R - contains all functions
  - mlc19_HPC_2019_test.R - test the functions using parameters required
  - mlc19_HPC_2019_cluster.R - code to set iterations in HPC
  - mlc19_cluster_run.sh - bash script to run in HPC
  - RDA_results - cluster run results from HPC
  - o_results - output file results from HPC run
  - e_results - error file results from HPC run

###Week 10
**Sections covered**:
* Biological Data Structure and C Programming
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: Week1, Week2, Week3, Week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, Data, Results

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
# README Week 7
<ul>The week focused on learning other Python components including numerical computing, Regex and data visualisation.

##Directory
**Code**
* profileme.py- functions of for loops that are used to test run -p on ipython (check run time)
* profileme2.py-same function but a list comprehension again checking run time
* timeitme.py- script that uses timeit rather than run -p to check the run time of individual functions
* Nets.R- produces a network to visualise the QMEE CDT collaboration network
* regexs.py- practice with regex and using different combination of elements to understand output
* TestR.R- script to be tested if it can be opened in workflow
* TestR.pyscript to test workflow and open the R script using subprocess
* fmr.R- reads NagyEtAl1999.csv and produces a graph

**Practicals**
* LV1.py- created a self-standing script that generated plots of consumer-resource population dynamics using scipy, using the Lotka-Volterra model
* LV2.py- Lotka-Volterra model however takes values of input variables from command line
* LV3.py- Lotka-Volterra model however where time increments are discrete and does not utilise scipy integration
* LV4.py- same as LV3.py except includes a random gaussian fluctuation drawn each iteration
* run_lv.py- script to run the different LV practicals
* DrawFW.py- script to construct a foodweb using networkx, saving graph in Results directory
* Nets.py- converts Nets.R into python script utilising networkx and matplotlib and saves results in Results directory
* blackbirds.py- reads the file blackbirds.txt and extracts certain statements using regex commands
* using_os.py- collects files and directories from directory based on certain conditions
* run_fmr_R.py- workflow to run fmr.R and produce output on screen and save graph in Results directory

**Data**
* blackbirds.txt
* NagyEtAl1999.csv
* QMEE_Net_Mat_edges.csv
* QMEE_Nat_Mat_nodes.csv
* TestOaksData.csv

**Results**
* LV_model.pdf
* LV_second_model.pdf
* LV2_model.pdf
* LV2_second_model.pdf
* LV3_model.pdf
* LV3_second_model.pdf
* LV4_model.pdf
* LV4_second_model.pdf
* QMEENet.svg
* Nets_py.svg
* DrawFW_network_model.pdf
* errorFile.Rout
* outputFile.Rout
* fmr_plot.pdf


**Sandbox**
**********************************************************************

Found following files in results directory: outputFile.Rout, TestR.Rout, fmr_plot.pdf, Nets_py.svg, LV_model.pdf, LV2_model.pdf, DrawFW_network_model.pdf, LV4_model.pdf, LV3_second_model.pdf, LV_second_model.pdf, LV3_model.pdf, TestR_errFile.Rout, errorFile.Rout, QMEENet.svg, LV2_second_model.pdf, LV4_second_model.pdf...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 19 code files: TestR.py, regexs.py, LV3.py, profileme2.py, timeitme.py, blackbirds.py, Nets.py, TestR.R, profileme.py, LV4.py, fmr.R, MyFirstJupyterNb.ipynb, using_os.py, LV1.py, DrawFW.py, Nets.R, run_fmr_R.py, run_LV.py, LV2.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
"""opens an R file through python workflow"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import subprocess
subprocess.Popen("Rscript --verbose TestR.R > ../Results/TestR.Rout 2> ../Results/TestR_errFile.Rout", shell = True).wait()
**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.16615s

======================================================================
Inspecting script file regexs.py...

File contents are:
**********************************************************************
"""Practice with regex in Python"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import re

my_string = "a given string"
match = re.search(r'\s', my_string)
print(match)
print(match.group())

match = re.search(r'\d', my_string)
print(match)

MyStr = "an example"
match = re.search(r'\w*\s',MyStr)

if match:
    print('found a match:', match.group())
else:
    print('did not find a match')

match = re.search(r'2' , "it takes 2 to tango")
print(match.group())

match = re.search(r'\d' , "it takes 2 to tango")
match.group()

match = re.search(r'\d.*' , "it takes 2 to tango")
print(match.group())

match = re.search(r'\s\w{1,3}\s', 'once upon a time')
print(match.group())

match = re.search(r'\s\w*$', ' once upon a time')
print(match.group())

import re
print(re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group())
print(re.search(r'^\w*.*?\s', 'once upon a time').group())

re.search(r'<.+>', 'This is a <EM>first</EM> test').group()
re.search(r'<.+?>', 'This is a <EM>first</EM> test').group()

re.search(r'\d*\.?\d*','1432.75+60.22i').group()
re.search(r'[AGTC]+', 'the sequence ATTCGT').group()
re.search(r'\s+[A-Z]\w+\s*\w+', "The bird-shit frog's name is Theloderma asper.").group()

MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s]+",MyStr)
match.group()
match.group(0)
match = re.search(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+),\s([\w\s&]+)",MyStr)
if match:
    print(match.group(0))
    print(match.group(1))
    print(match.group(2))
    print(match.group(3))


import re
MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a-academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a_academic@imperial.ac.uk, Some other stuff thats even more boring"
emails = re.findall(r'[\w\.-]+@[\w\.-]+', MyStr)
for email in emails:
    print(email)

import re
f = open('../Data/TestOaksData.csv', 'r')
found_oaks = re.findall(r"Q[\w\s].*\s", f.read())
print(found_oaks)

import re
MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a.academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a.academic@imperial.ac.uk, Some other stuff thats even more boring"
found_matches = re.findall(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+)", MyStr)
print(found_matches)
for item in found_matches:
    print(item)

import urllib3
import re
conn = urllib3.PoolManager() # open a connection
r = conn.request('GET', 'https://www.imperial.ac.uk/silwood-park/academic-staff/')
webpage_html = r.data #read in the webpage's contents
type(webpage_html)

My_Data  = webpage_html.decode()
#print(My_Data)

pattern = r"Dr\s+\w+\s+\w+"
regex = re.compile(pattern) # example use of re.compile(); you can also ignore case  with re.IGNORECASE
for match in regex.finditer(My_Data): # example use of re.finditer()
    print(match.group())

New_Data = re.sub(r'\t'," ", My_Data) # replace all tabs with a space
# print(New_Data)
**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00324s

======================================================================
Inspecting script file LV3.py...

File contents are:
**********************************************************************
"""Discrete time version of the LV Model and saves pdf in Results folder"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import scipy as sc
import sys
import matplotlib.pylab as p

def CR_t(RC0, t=0):
    """returns the growth rate of consumer and resource population at any given time step"""
    RC = sc.zeros((t,2), dtype = 'float')
    RC[0,0] = RC0[0]
    RC[0,1] = RC0[1]
    for i in range(t-1):
        RC[i+1,0] = RC[i,0] * (1 + r * (1 - (RC[i,0]/K)) - a * RC[i,1])
        RC[i+1,1] = RC[i,1] * (1 - z + (e * a * RC[i,0]))
        if RC[i+1,1] < 0:
            RC[i+1,1] = 0
            print("resource population went extinct at time", i)
            break

    return RC

if len(sys.argv)==6:
    K = float(sys.argv[1])
    r = float(sys.argv[2])
    a = float(sys.argv[3])
    z = float(sys.argv[4])
    e = float(sys.argv[5])
else:
    K = 30
    r = 1.
    a = 0.1
    z = 1.2
    e = 0.75


#integrate from time point 0 to 15, using 1000 sub-divisions of time
t = 100
R0 = 10
C0 = 5

RC0 = sc.array([R0,C0], dtype = 'float')
RC = CR_t(RC0,t)
print("consumer population is: %s, resource population is: %s" %(RC[t-1,1],RC[t-1,0]))

print(RC)
#Plotting
f1 = p.figure()
p.plot(range(t), RC[:,0], 'g-', label='Resource density') # Plot
p.plot(range(t), RC[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
#p.show()# To display the figure
f1.savefig('../Results/LV3_model.pdf')

f2 = p.figure()
p.plot(RC[:,0], RC[:,1], 'r-', label='Consumer density') # Plot
p.grid()
p.xlabel('Resource Density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
#p.show()# To display the figure
f2.savefig('../Results/LV3_second_model.pdf')
p.close('all')
**********************************************************************

Testing LV3.py...

LV3.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
consumer population is: 3.63909671743, resource population is: 20.954076455
[[ 10.           5.        ]
 [ 11.66666667   2.75      ]
 [ 15.58796296   1.85625   ]
 [ 20.18292399   1.79888672]
 [ 23.15682123   2.3632322 ]
 [ 22.96653559   3.63172448]
 [ 20.01019967   5.52926481]
 [ 15.60929368   7.19227401]
 [ 11.87028733   6.98151899]
 [ 10.75652031   4.81914394]
 [ 12.47256102   2.92396268]
 [ 16.11269913   2.15040519]
 [ 20.10654597   2.16858135]
 [ 22.37705086   2.83648477]
 [ 21.71580515   4.
**********************************************************************

Code ran without errors

Time consumed = 0.74332s

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
"""Changed functions to include list comprehensions and see how run time is faster with profiling"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

def my_squares(iters):
    """for range of iters, value of i is raised to the power of 2 each iteration"""
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    """Repeats string input, iters many times with a comma separating them"""
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    """runs both functions showing input and output"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.66368s

======================================================================
Inspecting script file timeitme.py...

File contents are:
**********************************************************************
##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################
"""Comparing loops and lists looking at runtime"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

# %timeit my_squares_loops(iters)
# %timeit my_squares_lc(iters)


##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################
"""Compares loops and joins looking at runtime"""

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join

# %timeit(my_join_join(iters, mystring))
# %timeit(my_join(iters, mystring))
**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 98

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00735s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
"""Uses regex to print certain information from the DataFrame"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import re
import pandas as pd

# Read the file (using a different, more python 3 way, just for fun!)
with open('../Data/blackbirds.txt', 'r') as f:
    text = f.read()

# replace \t's and \n's with a spaces:
text = text.replace('\t',' ') #removes tabs
text = text.replace('\n',' ') #removes new lines and just spaces out text

# You may want to make other changes to the text.

# In particular, note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform to ASCII:
text = text.encode('ascii', 'ignore') # first encode into ascii bytes
text = text.decode('ascii', 'ignore') # Now decode back to string

# Now extend this script so that it captures the Kingdom, Phylum and Species
# name for each species and prints it out to screen neatly.

my_Kingdom = re.findall(r"(?<=Kingdom)\s+[A-Z]?\w+", text) #?<= means don't include Kingdom, look for one or more space followed by a capital character then one or more alphanumeric characters afterwards
print(my_Kingdom)
print(my_Kingdom[0])
my_Phylum = re.findall(r"(?<=Phylum)\s+[A-Z]?\w+", text) #don't include Phylum, look for one or more space followed by a capital character then one or more alphanumeric characters afterwards
print(my_Phylum)
my_Species = re.findall(r"(?<=Species)\s+[A-Z]?\w+\s+\w+", text) #don't include Species, look for one or more space followed by a capital character then alphanumeric characters afterwards one or more times, followed by space and more characters
print(my_Species)

#create data frame to display data
df = pd.DataFrame(index = range(len(my_Kingdom)),columns = ['Kingdom', 'Phylum','Species'])
print(df)
#add elements columnwise
for i in range(len(my_Kingdom)):
    df.iloc[i][0] = my_Kingdom[i]
    df.iloc[i][1] = my_Phylum[i]
    df.iloc[i][2] = my_Species[i]

print(df)

# Hint: you may want to use re.findall(my_reg, text)... Keep in mind that there
# are multiple ways to skin this cat! Your solution could involve multiple
# regular expression calls (easier!), or a single one (harder!)
**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
[' Animalia', ' Animalia', ' Animalia', ' Animalia']
 Animalia
[' Chordata', ' Chordata', ' Chordata', ' Chordata']
[' Euphagus carolinus', ' Euphagus cyanocephalus', ' Turdus boulboul', ' Agelaius assimilis']
  Kingdom Phylum Species
0     NaN    NaN     NaN
1     NaN    NaN     NaN
2     NaN    NaN     NaN
3     NaN    NaN     NaN
     Kingdom     Phylum                  Species
0   Animalia   Chordata       Euphagus carolinus
1   Animalia   Chordata   Euphagus cyanocephalus
2   Animalia   Chor
**********************************************************************

Code ran without errors

Time consumed = 0.37282s

======================================================================
Inspecting script file Nets.py...

File contents are:
**********************************************************************
"""Python version of the R script that produces a network of Imperial College data"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import networkx as nx
import scipy as sc
import matplotlib.pyplot as p
import csv
import pandas as pd
import numpy as np
import matplotlib.patches as patches

#loc gets rows (or columns) with particular labels from the index.
#iloc gets rows (or columns) at particular positions in the index (so it only takes integers).

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0
#link_sc = sc.genfromtxt("../Data/QMEE_Net_Mat_edges.csv", delimiter=",")
#nodes_sc = sc.genfromtxt("../Data/QMEE_Net_Mat_nodes.csv", delimiter=",", dtype=str)

link_pd = pd.read_csv("../Data/QMEE_Net_Mat_edges.csv", header=0)
link_pd.columns = list(range(0,6))
print(link_pd)
nodes_pd = pd.read_csv("../Data/QMEE_Net_Mat_nodes.csv", header=0)
print(nodes_pd)
print(nodes_pd['Type'][0])

#create colour list
colour = []
for k in range(6):
    if nodes_pd['Type'][k]==str("University"):
        colour.append(str("blue"))
    if nodes_pd['Type'][k]==str("Hosting Partner"):
        colour.append(str("green"))
    if nodes_pd['Type'][k]==str("Non-Hosting Partners"):
        colour.append(str("red"))
print(colour)

#create list of tuples with values > 0
link_pd_list = []
weights = []
for i in range(6):
    for j in range(6):
        if link_pd.iloc[i][j] > 0:
            link_pd_list.append((i,j)) #add coordinates to list
            weights.append(int(link_pd[i][j])/10) #and weights
print(link_pd_list)

pos = nx.circular_layout(nodes_pd.index.values) #creates canvas
G = nx.DiGraph() #initiate graph with arrows in edges
G.add_nodes_from(nodes_pd.index.values) #add nodes
G.add_edges_from(link_pd_list, arrows=True) #add edges

#Initialise figure
plot = p.figure()

#Draw the plot
nx.draw_networkx(G, pos, node_size=2000, with_labels=False, width=weights, node_color=colour, edge_color="grey")
#add labels
nx.draw_networkx_labels(G, pos, nodes_pd["id"]) #labelling each node

#legend
blue = patches.Patch(color = "b", label="University")
green = patches.Patch(color = "g", label="Housing Partner")
red = patches.Patch(color = "r", label="Non-Hosting Partner")
p.legend(handles=[blue,green,red])

plot.savefig("../Results/Nets_py.svg")
**********************************************************************

Testing Nets.py...

Nets.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
    0   1   2   3  4   5
0   0   0  10   9  5  70
1   0   0  12   0  2  76
2  10  12   0   0  0   6
3   9   0   0   0  0  28
4   5   2   0   0  0   0
5  70  76   6  28  0   0
      id                  Type  Pis
0    ICL            University   72
1    UoR            University   43
2    CEH       Hosting Partner    8
3    ZSL       Hosting Partner   25
4  CEFAS       Hosting Partner   48
5  NonAc  Non-Hosting Partners   56
University
['blue', 'blue', 'green', 'green', 'green', 'red']
[(0, 2), (0,
**********************************************************************

Encountered error (or warning):
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file TestR.R...

File contents are:
**********************************************************************
##test code for workflow in python

print("Hello, this is the R!")**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Hello, this is the R!"

**********************************************************************

Code ran without errors

Time consumed = 0.09935s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
"""Functions to test runtime"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

def my_squares(iters):
    """for range of iters, value of i is raised to the power of 2 each iteration"""
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    """Repeats string input, iters many times with a comma separating them"""
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    """runs both functions showing input and output"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.50113s

======================================================================
Inspecting script file LV4.py...

File contents are:
**********************************************************************
"""Discrete time version of LV Model but also takes into account fluctuation using gaussian distribution"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import scipy as sc
from scipy.stats import norm
import sys
import matplotlib.pylab as p

def CR_t(RC0, t=0):
    """returns the growth rate of consumer and resource population at any given time step"""
    RC = sc.zeros((t,2), dtype = 'float')
    RC[0,0] = RC0[0]
    RC[0,1] = RC0[1]
    for i in range(t-1):
        RC[i+1,0] = RC[i,0] * (1 + (r + norm.rvs(1)) * (1 - (RC[i,0]/K)) - a * RC[i,1])
        RC[i+1,1] = RC[i,1] * (1 - z + (e * a * RC[i,0]))
        if RC[i+1,1] < 0:
            RC[i+1,1] = 0
            print("resource population went extinct at time", i)
            break

    return RC

if len(sys.argv)==6:
    K = float(sys.argv[1])
    r = float(sys.argv[2])
    a = float(sys.argv[3])
    z = float(sys.argv[4])
    e = float(sys.argv[5])
else:
    K = 30
    r = 1.
    a = 0.1
    z = 1.2
    e = 0.75


#integrate from time point 0 to 15, using 1000 sub-divisions of time
t = 100
R0 = 10
C0 = 5

RC0 = sc.array([R0,C0], dtype = 'float')
RC = CR_t(RC0,t)
print("consumer population is: %s, resource population is: %s" %(RC[t-1,1],RC[t-1,0]))

print(RC)

f1 = p.figure()
p.plot(range(t), RC[:,0], 'g-', label='Resource density') # Plot
p.plot(range(t), RC[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
#p.show()# To display the figure
f1.savefig('../Results/LV4_model.pdf')

f2 = p.figure()
p.plot(RC[:,0], RC[:,1], 'r-', label='Consumer density') # Plot
p.grid()
p.xlabel('Resource Density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
#p.show()# To display the figure
f2.savefig('../Results/LV4_second_model.pdf')
p.close('all')
**********************************************************************

Testing LV4.py...

LV4.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
resource population went extinct at time 46
consumer population is: 0.0, resource population is: 0.0
[[ 10.           5.        ]
 [ 22.81083489   2.75      ]
 [ 28.30544756   4.1547347 ]
 [ 16.24402597   7.98917494]
 [  8.47585214   8.1353924 ]
 [ 14.31300687   3.54450025]
 [ 23.7199224    3.09603418]
 [ 21.97416502   4.88861995]
 [ 19.10947178   7.07902663]
 [ 19.55017766   8.72992914]
 [ 15.32045685  11.0543891 ]
 [ 17.1283979   10.49099402]
 [  8.0970145   11.37884519]
 [ 17.31777397   4.6343
**********************************************************************

Code ran without errors

Time consumed = 0.93919s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.
# Writes the list of species names to species.csv

##__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
##__version__ = '0.0.1'

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../Results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.17962s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!usr/bin/env python3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import scipy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = sc.arange(0, 5, 0.1); y = sc.sin(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "require(ggplot2)\n",
    "library(repr) #to resize plot within jupyter - this package is part of IRKernel\n",
    "require(ggplot2)\n",
    "library(repr)# to resize plot within jupyter - this package is part of IRKernel\n",
    "options(repr.plot.width=3.3,repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y <- sin(x)\n",
    "qplot(x, y, geom = \"line\") # large figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Maths in Juypter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sympy.core.symbol.Symbol"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = var('x') #recgonise it as a mathemtical symbol \n",
    "type(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = var(\"a, b, c\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = var('x', real=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.is_imaginary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Symbol('x', positive=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x > 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x < 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(x + pi)**2"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun = (pi + x)**2; MyFun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\\\left(x + \\\\pi\\\\right)^{2}'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latex(MyFun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\left(x + \\pi\\right)^{2}\n"
     ]
    }
   ],
   "source": [
    "print(latex(MyFun))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi.evalf(n=100) # pi to a 100 places after decimal!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(pi, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(x + 3.1416)**2"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(MyFun, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.5 + pi)**2"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun.subs(x, 1.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(a + 2*pi)**2"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun.subs(x, a+pi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(a + 2*pi)**2"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_new = MyFun.subs(x, a+pi); MyFun_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_vec = sc.arange(0, 10, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = sc.array([N(MyFun.subs(x, xx)) for xx in x_vec]) #Note: using a list comprehension!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_new_vec = sc.array([N((MyFun_new).subs(a, xx)) for xx in x_vec])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x113872d30>]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = p.subplots()\n",
    "ax.plot(x_vec, MyFun_vec)\n",
    "ax.plot(x_vec, MyFun_new_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_lamb = lambdify([x], MyFun, 'numpy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = MyFun_lamb(x_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18 ms ± 162 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit #remember this?\n",
    "\n",
    "MyFun_vec = sc.array([N(((x + pi)**2).subs(x, xx)) for xx in x_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.74 µs ± 3.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "\n",
    "MyFun_vec = MyFun_lamb(x_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIAAAAAVBAMAAAB8u/sIAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarMolUmd1mIrvNRO9/G2jnAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABj0lEQVQ4EZ2TPU/CUBSGX2oBKVEaY+LgQtQf4EdM2MDIYJwc7N7F2brYuBjGTmr8BU1YXE38AewOMrE6mTgJGiejqbf387QQDTDce+55nveEXgrAPwVvxxXVNCtJlVHuTBMVLknV+s7n9ANIquLOMiCTKs7wCABJHeQu0QkfW/8/lEk59zm7i+JPrjV+JKkuDgVfuBH7FvA2nlBUEp2C89A+E81SXexDF81YlGRVVLRMCotJMhJNpTSAZotEs1ScRGppfdnzjakGsM41rGGSJAGMoqgEPBZY2/QtVApgf8AbHN+2AaMoKkE6oBJbX3Py4tKzUoD5wPateCOjSCpB6sNGtceLdClH0dVrFG3yRsjWKtivoRRKOeAaUKvLgm/6G1QCdt5HJ+1qRVMJUojnuODygi9aOYET4xyjjKKpBAyu9psomry+A/sIllt4B3sdiaIGCMBjp3uXGEwYcBeGDVg9vABEUQME4LGVtdKFP2HAU5J8o+pjFyCKGiAAiZlSKaZDq78pN3N/F5pm9Tj9BVLsZ7MTCE8QAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x^{2} + 2 \\pi x + \\pi^{2}$$"
      ],
      "text/plain": [
       " 2            2\n",
       "x  + 2⋅π⋅x + π "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(MyFun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x**2 + 2*pi*x + pi**2\n"
     ]
    }
   ],
   "source": [
    "print(expand(MyFun))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAaBAMAAADmhQeIAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAInZUiRDNmWbvRN27qzJGkhbKAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABZUlEQVQoFY2Svy8EQRTHv7tu7R7rbv8Akgs12YhOobmWbDSai2yiUW78SIhmo1ApKWhccokQhRPlRkGiVQiloFCJcwqNwpq3b5YM1nrFe/P9vk9m3uwskBNG9cbLQQATZjMXKte191zI8v4BAQU6zsncTUs6j2Jw3c2EuiqipZ2LNJLJAAOi14d7GP4fUKcH7aK1CDNUoD1FWQGKcdxGUXExrMpNlruq+w2a5e6CKJOD01V5RwnpO3EcB8A4Q8QG+mX6QBKqNiZWW6KzxtAxYDn6S0/IkqGSqztDZIyyuw2UYPuJWImirSg6obWNayrPlAABAeUKZYp08Cc0Se5TAmYoHTqGR/ULmkebpDzuDKjVb1EgS4TcyXjFG8l1Ssklxx6W0WCVQrqPDXLm2D4Apvo7llwVsl1ckXPEdvcdV5nTwVlqyfTiIwUKpD7w5+ufKpAqelNZSxe/VPopk9BCufhZLIe9D7BERAVG3AzwAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factor(x**2 + 2*pi*x + pi**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAvBAMAAADdrw/+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMt0Qq5nNdrvvIlSJZkTVYgFVAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACIElEQVRIDe2UMWhTURSG/+SZJnnJC6FjJ0nrIAq+oUM7tSgl3VqEdGppoIOCSOMqQjMp7aJ0qoL2UVq6dpYOEQTXUOjiojgo3cRCHRTjf8+7L72vee0dOim5Q+455//u/849eQlgWYO+BbDIztTyJR2Alb6DTLk/h/Bl+y/mML050rD8dvpyfwLmBDqXXabZvx0H57UfCdHew2khu9ej6MK3cLcC+4kGqWFAH00E3Nr9sgacepLD6Nwxy0tKcur86FnbKP7RQKZtqqUoyyqHQyUlA3eAlxrImwYoRP9I4pD3KSYDmz5mAgjw9QKHAdVRMnAbmClDgHlC7vxj/ex4D8VJigrAzoddteG0SeAWIMBDlo+CnLo2V9zBq7OkgNIrPFc3MgCkfgIC3OC0XyNzVfQzDgVVJYDxNu6eAZCepZ8C3nDax0i3GGYqlevrlcokQ8gkU98ZEcCij5vcTAA1FiIg38TEZ+Zc8VuUXrCkHDbg8NtXqwt4bAECPAAmWvgksgFID9IkAec3PNUOV9dhH24Q3uIZHfbwtBDEAXHwmiwScH4hV38bA1ItZH0I8B4YaHjXiqKfPkIcMg1WCeAeDmZbQkQ9bNVqfCUE+MJHVN9tPxK963Bl9UcVSAesEsDok6FqWYjIYbnTOdFAOlRENq4p+Zb6tAIyU32ew213QwYLKrECWDPPxGK3KakVGIudMpOcL5kVcGONmw4fw+Ri4C9pyMO87+abaQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\frac{1}{\\left(a + 1\\right) \\left(a + 2\\right)}$$"
      ],
      "text/plain": [
       "       1       \n",
       "───────────────\n",
       "(a + 1)⋅(a + 2)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1 = 1/((a+1)*(a+2)); f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAI4AAAAsBAMAAABBB53eAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM3dMquZdrvvIolEZlQyeDuZAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAByElEQVRIDWNgwAKcBbAIYgixGGIIoQgwhukTY45o0kcUbVg49cSYw8A+ag6WsEMIjYYPIiywsYZc+ETMNy3A5hFUMdbOz+GoIkORx3OBOq7mIyLEiLFpxJojZAwCJgwM/7GDD8DQYzM2tpxsbBwAZPJjV/WfmDAGqRmx4UxkAFEUPsuSWmDW4DOHUEXPFcCw/wDUIDz5FHdFfxaimVWAgXMCzEFYaKgy3BX9c4gmzo8MrL+w6IcJQZURNIfVgIH1C0wTFhqHOVzZVdBCBqaAgYEZlC1QwbLty6ECMGVoFdDJBRzQFg1MAQODP9RkhFE8sxj6BSBcmDJUcxjnMrAZoCpgYDBDGABlSV5gSIYysZvD9pGBeQNQRbKx8UxjY1OwWrYEqBYElS/AYA3iISlDdQ9nA4P8AYh6mEUM1yB8ZHIGA+MfKB+mDNUc+Q0M99EU8G1gWIVsBpDN+JuB9wOaMjRzHjA08S0AK4FZ5M3AUAjVA6MY/zFwKLyC8GDKUM1hKuA140ZRwGWWlgoNeZgxDAzqDJcTQMEIBNjNYQzfsrQERQETsAxVgIggSNFqr3AHCBdqDu6KHmYRQjdWFkFlsAyIVTdCEFkZAGeepsEa3rDXAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$- \\frac{1}{a + 2} + \\frac{1}{a + 1}$$"
      ],
      "text/plain": [
       "    1       1  \n",
       "- ───── + ─────\n",
       "  a + 2   a + 1"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "apart(f1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHwAAAAsBAMAAABVvsF6AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMt0Qq5nNdrvvIolEZlSFnHVmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAB7UlEQVRIDe2Wv0vDQBTHvzHW/q7F0UliHUTEDC5O8QdSt5ZCXBzsplsrOOmgkyAIgpMVxSKKg0sdxNXFwUEo/gN2E3RQLOigtF5zd0mOxFAUQUoPer33fe9zL/cujxawRo9qrb9fSf2uPnk61ww+Olt1xYG1ZnD427izfu3SOWsiKn/02swcJvJiIjerc/M16ab/Qy1S/tVDxZqohkeC1sbr7uOFFMSnKIM7ijJOlt3uUXXi8hqtXTqvkwM/OfvZxRbf1AMP6YtxHmb/ltO4rzDBo2WOEf60Y7illr8GLSs4BIPvOAUUBMcDtSL76M4KDsHg5zlUkSraPQwn0rNHm3N8EkiRw4fmVvJ0ExOPDNt3peuTy1O64DixRsjnphhgv9gcl5YnaKRtjuxhWzVsC5feAfkAvj4ax3Hy8BWqWPNYGRlqWXhHmrRVFR0l4sgoSkFREjQk6PgHMa9iiPhsTQjoRAiuQ7uiEMsuxRGoUcWadyGzWzazR0lyaCXcsyiGa1UnLn8g+kLDTPwJoSK0CjZiRcPD8OA4HA8v1xDIPhpRHJdK8KvoykcHwnRfhkfLLve+gLt0o0RWFx3pOrl6OXl+vCTguNbNlqEOMo+u9ibjhsWz5+r1N9PdWLDsguY0OO7wsJZx6KLAW8ZQvwB6BKc5kpZRIwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\frac{1}{a + 3} + \\frac{1}{a + 2}$$"
      ],
      "text/plain": [
       "  1       1  \n",
       "───── + ─────\n",
       "a + 3   a + 2"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f2 = 1/(a+2) + 1/(a+3); f2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAwBAMAAAAvL7+wAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAIpnNuzKriUQQ7912ZlSugimNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAC50lEQVRIDe2VP2gTURzHv5cmae7ShNihSx3CWewg0gwu4r9KcVJoHMRFsDgIYqFZ1EVowK11OEUcXFqhiFqkoUvRgI2CiJPRVcU4da0U0YI2ft+9e8mFe70LVOjiG97vvd/v8/vee+/u3g/ouiWAO13C/ftO6Uhr48hznT/oMyYwXQ66kV5dcTRujSvpwJr3+VN1OUn6fOFDaxPJ7z4kW5OT7hWSFSR/7EiByel1GMOvvGe31vD5ddEnHD68WMNMLr4pIaUQd4xf4Wm+6DLMZ4hVOhU4O+1jQoexPGKbSJcIxarVF4vV6oTkR3Khee3gR8AaxVxZetQuxoCRLg8iW8KeuRK+epJKYRGYaj8ldHQeeDfXwFhWrlkpcFMLoXmtoLFs76/01DLLvdKlFPrR96QFhQ56ms1mwZy8NvCmU8GwLzmhidsG1Rq2BSID6s+KBP8Du34C/Hx21nZ9B/9sAfIn1sipgLIBxAv0NQIRz3Fb2khgTSdg2IeK8FL1wI2hsgeYBZ3CAHp5tR8WIT1wF5ktD4jV/QrqV74CPAV45fK61gLvG+aGB1h+AajrZMnBVA6Ww6AemCmDCi5wS6twlRdzET3i8XoAyP6BBIYJBYsknatA7wStANB/c68wzKu5ht0s5V3gGCfBIgkkfgOZAoMCSD3EuNiRT+HC5aIHvORp64pkOk+8whwCeFDHARq29hqyfBcu8JinrSuSNvHEOjsCGHGwQtNZRZecFmAFiyQyeWak5tkJhQWYXuXP1jhlOweMNyRwHNAUSazByMlFEjB/IiOWw+YpmE1HKLi7OEOFYJFMlNDnIDPKHALmFuKFb0JAKeARwF24wHW+1WCRHLRtfhKxGnMI4Cg+5Uu0bYUv7vfgArN8RLBInmg2+cmlc8whgPtvz04WhUBrDSl7qOwBaRkRUTZ1UHI2KEwk4B66TGCv/izpOChMJICTktb0xqjrjATuaXKlK+64NhIw6ttJfJCBcOAvFe4GXLdFpBUAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\frac{2 a + 5}{\\left(a + 2\\right) \\left(a + 3\\right)}$$"
      ],
      "text/plain": [
       "    2⋅a + 5    \n",
       "───────────────\n",
       "(a + 2)⋅(a + 3)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "together(f2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAwBAMAAAAvL7+wAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAIpnNuzKriUQQ7912ZlSugimNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAC50lEQVRIDe2VP2gTURzHv5cmae7ShNihSx3CWewg0gwu4r9KcVJoHMRFsDgIYqFZ1EVowK11OEUcXFqhiFqkoUvRgI2CiJPRVcU4da0U0YI2ft+9e8mFe70LVOjiG97vvd/v8/vee+/u3g/ouiWAO13C/ftO6Uhr48hznT/oMyYwXQ66kV5dcTRujSvpwJr3+VN1OUn6fOFDaxPJ7z4kW5OT7hWSFSR/7EiByel1GMOvvGe31vD5ddEnHD68WMNMLr4pIaUQd4xf4Wm+6DLMZ4hVOhU4O+1jQoexPGKbSJcIxarVF4vV6oTkR3Khee3gR8AaxVxZetQuxoCRLg8iW8KeuRK+epJKYRGYaj8ldHQeeDfXwFhWrlkpcFMLoXmtoLFs76/01DLLvdKlFPrR96QFhQ56ms1mwZy8NvCmU8GwLzmhidsG1Rq2BSID6s+KBP8Du34C/Hx21nZ9B/9sAfIn1sipgLIBxAv0NQIRz3Fb2khgTSdg2IeK8FL1wI2hsgeYBZ3CAHp5tR8WIT1wF5ktD4jV/QrqV74CPAV45fK61gLvG+aGB1h+AajrZMnBVA6Ww6AemCmDCi5wS6twlRdzET3i8XoAyP6BBIYJBYsknatA7wStANB/c68wzKu5ht0s5V3gGCfBIgkkfgOZAoMCSD3EuNiRT+HC5aIHvORp64pkOk+8whwCeFDHARq29hqyfBcu8JinrSuSNvHEOjsCGHGwQtNZRZecFmAFiyQyeWak5tkJhQWYXuXP1jhlOweMNyRwHNAUSazByMlFEjB/IiOWw+YpmE1HKLi7OEOFYJFMlNDnIDPKHALmFuKFb0JAKeARwF24wHW+1WCRHLRtfhKxGnMI4Cg+5Uu0bYUv7vfgArN8RLBInmg2+cmlc8whgPtvz04WhUBrDSl7qOwBaRkRUTZ1UHI2KEwk4B66TGCv/izpOChMJICTktb0xqjrjATuaXKlK+64NhIw6ttJfJCBcOAvFe4GXLdFpBUAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\frac{2 a + 5}{\\left(a + 2\\right) \\left(a + 3\\right)}$$"
      ],
      "text/plain": [
       "    2⋅a + 5    \n",
       "───────────────\n",
       "(a + 2)⋅(a + 3)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simplify(f2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEQAAAAQBAMAAABdIsRgAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAIpnNuzKriUQQ7912ZlSugimNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABIklEQVQoFWNgVDIJYMAKgmCiYgzsP2BsVHobjJvJwLAKxgbRvTAOD1zJ+gkM+QIwYSD9BsaONYOxshkY8pEdA1dSAFcCVLqfgUGoRgaqB6aERwCo5NT///8/ASVY/zBwLGTwnwBRA1Miy2DGwF7xPPYoyApuBYZZFxi00UwpACqJYzjIA3aEEgOD/gSG7SAl2rt3r9q9G+QVXgGgEgYGBzaQ4bwKDAxLGDhhgQO1COg0oBLWBG6gCobnDIyS3xl4P4DYQABV0paW9iudgekBP1CItYCBZ+Y/BhaDh2AVMCVAzjIGhvkT+BsYGKSVlLIZbBhuKxSgK/nCwHCYgQsobP///2eGaccDcwLQlCj/92HwY2CD6oRIoilBFkRlw6MRLgwA11lGZjmJGqAAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$2 a + 4 \\pi$$"
      ],
      "text/plain": [
       "2⋅a + 4⋅π"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new, a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAkAAAAOBAMAAAAPuiubAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAIpnNuzKriUQQ7912ZlSugimNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAT0lEQVQIHWNgVDIJYGAQY2D/wcCQycCwioFh/QSGfAGGbAaGfKAEA8N+EMH6B0RyK4BIJRDBqwAinzMwCjCwFjDwTGCQVlICarH///8zAwAXpw31OpgbMwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$2$$"
      ],
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new, a, a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGsAAAAaBAMAAABC779bAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMt0Qq5nNdrvvIolEZlSFnHVmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACHUlEQVQ4EZ1SP2jUYBx9icndJfendXASNZ7ebIbi4nCHDh1biukiwoGLm1cEwQ5yLoKLdO0gDaWCCGIUR8HbxEEQpEsXszl0qR4qSCG+35d8l1zapffgvnu/9773/b4/AU6Ma+9vnDjDwDJWZokd4s38DLlvs8WAd+Vmblko1aHUxqWSikdloVR/kvqlz0GybnBXnbIVlaap8sXqYy1XY07uGSEWVsfADuqH4lyVoQy3h48jLd5hs9Nn2K7KGN9vU4zb2lX/X9LK8uFsaGMX2EoSVhLb8rEUkk9cNeuHGuGMYf1LKeCwkYLErgNL80Cjn2npXxazPFg/tVH5mjGJEVf4syMO7q31gQhAFiMzD/AwSZLfQL0nDpHGjL+kaqnPYS1dqBC7MKh/2D+3xg01+5Ih0pi5TGrGwKnnsD1yIu/WwXmsV5lCyxOHSGOBUGfEjY5hRuQr7fZmu31ZZNiy5pA3ylc+EIFQsaYYKuYM0R1JUejGW4fRM0VrbMhIqNg+3JBni4FuhO8iE3qT/HZewY7nRJvapBGhyi3UBozFeNIKZcYkdha4j64/N6LWHHIQSLftIODTqdutDJqdujJ0zO0ENz08gBNRtrmywHr6axH3kuQPecPjTS6+3VkTY9Ktwhfr4xksiZmhOCVcnKr12YridrHQXK4sR/Yp5wLZ9MeeWbVwas7Rwh0e1XiwY9XCzJpfKHL6OqfHsr1M/Q8L5Hiz98K2VAAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$12 \\left(a + 2 \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "            2\n",
       "12⋅(a + 2⋅π) "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new**2, a, 2) # same as above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALEAAAAVBAMAAAD7ihIOAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMt0Qq5nNdrvvIolEZlSFnHVmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACvklEQVQ4Ea2UTUhUURTH/88305t5b8YZQzeCIZO7Fj1IgnDhQydcSM3DGFdlAwlFGzUoSDeGi6hFLnKRtvBRhrMJpy+MDJpFtKuGooQgmF2QiyzJDxJv583ce+fpjJLSXcw953/+53fPm/cBbF7qXNzcrOwla3naXtbmh7+xTNy1YKOrrCeS1X+WibsW1jET3doUNv8H+WMFMmA0bj1tL/ljalIOAnrygpx+f/kdrANahk7vdIBiQ519lpUWF9rcvQRMwVjnqj4iyzJoAmz48jIvD6os+IGTspB2x9OI3A6Mc3UK9Tx6K3xaE8I5qCmRl3ZpuWThK3BUVHRLcYrkSRMJCmnp12pOFQLgG9/R0AtjGGpK5KVdWJTPFp57yOmaOhranbkNSEQLDUHGFnmnaEOmF6FV058rEUUkLMY+C+9HcEbok4xR6JJpHQYezE4XQv4j2jSnlw5e6QGuMsZ+e33CMkhkH7uch0ZMZnNAkaysIDSBUdODFm0PQWSDXYTxcqFhIOr1cYueIzJeLTuYe/dovkYwiuQqG8dym99JQc645IU0yx7AoBaF18ctBohc/WJ0XclrzoAA838jCZw1cUiqXbHYeCzWRHnYIXLYxo/bwLCPLkr4SpYvLvkTqtdMBNznjK/CzNSJO1DFQ10o8YGmQeSgCX0DilVFFY+vaNH7XTIdPJNHLRo5l9/BBej3/yC8KFUKOPl1PL7W2Ur5CfjzEUD1+IqWUDyeGHtCvb4celBiuDMrGWhHNhBIffegOZmUMQQd4CZazUgWqscnLUELE0DAUZdQum6XfC+ZbMN5fLAzFcmrCJ1DuB9XECSDxyfJkWG8MTEPLYW7AuG78asDfYwto3moviMqZNplWze7jtokfZFuwUdkj09Y/H2r/crxZBaBPDo9iG1C0bZN2ZX/wVKpW35uKhWL2k6Wv+OFymPD3naeAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$12 a^{2} + 48 \\pi a + 48 \\pi^{2}$$"
      ],
      "text/plain": [
       "    2                2\n",
       "12⋅a  + 48⋅π⋅a + 48⋅π "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(diff(MyFun_new**2, a, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y, z = var(\"x,y,z\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = sin(x*y) + cos(y*z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAAVBAMAAACZJT5kAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM3dMnariVSZZiK7RO/kCJG0AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADuUlEQVRIDYVVXYgTVxg9k2SzmSSTRlHBIjL1SUofAlFRBNnSB1+EHR92dVvQ+CBSaWkQ6go+dEBEfNGwZRUXqkEQFIVGRVBbZBXriz+EFtEnN6Uq/aGy4oroiuv57tzdmbmzrAe+yTnnfvf7Zu69MwESKCQcw2hFdUxEBwweqyoiZswkb55hs5MuP+rfj4o5eKyq4wESCeTqCStuHIjJ+K1w6MrQTZ1Q+DfMNKrKrcRuR2fOD2fMyiw3bn8Sl4UafmgHlvM6HDKqpsqAhIkR0zC03YwbZ7R0Aj9bRqmjrUh1o2q+AUiY6JiGoUum1i1ynhooPUd20kih7BjWn9QScThuXCfU74aTagaGbp6tIDthpPB0uYb1KbVEAKtv2/o9pHYdCPjCYVg1iqODPhb3/YTMl30uE44yFvYvGPStAQ+LgG7mCHRzsvQ4VPKFp/jin0v9siKJqrtpSgSw0e/9SCoPEvD6IeRZ5prvPM6sRdFbAlSYIPfb6NpuV7pzHfzMrXNpEGHzXrZTyauAp15GNiFR9SRNiQBnsbW1kzTtA4oX/CFkR4FlyP2XriMz8aiMOoDV7Nfqmsw2L9suvmFTuSMibL6GSiXfAu4BbygTVffR3If5VcEK9OAGNVBqI+AWnqDkwXpFs9cHXqXffiUJ/3NNUXSBMkefUIzTtKvVdX9VqzVS2A1eVDKb3wFeUppV0UtTYhqSFKQFE5zn6O1BRuzDvKO31q4pKcvmwEceL2PlDI+W0xEj8uTq3VPJ8ebRqnjEGRIaziTmkaZ8XhTnqm7heZMvhTz56/P4WI7xcgbGWlYZQ+jqJJed37JfAJUcNjercsll2TWsu9lxtaVFrnTAizVwNvccuVIDzsR+QA7FbzxN7e/QDY4yBflRmsT0nq8HNgIqOWyeqHqOMyQUchOLO45PyjdHc7vmyFm51sTezGOk6ofKuE3NF+Tw58fxEDiCsSa3WHaA0M0La44dqQAqmRv+WbDYiarDnCGhYA17B08LcyrQ3NoxIG+J9fVgC1cGv8WDU5va1H+Ab31uxAcWfX+ixaPFEOjmqampKRcqecOz6xve3Tz3ojZL1bWcIWFgRai73ZDPsHTPDMUu0otaTi97OBplRtVChX/oDBPTfxQ8T0t9c5A639Cm7Vp/k45o6TQ1mfXHqGozWcJEsaWdldhhjiktGy9Ie9k6739UiQ9djKq/Ml/ChDWqnf0DbXNMaX45FXL83gPFspZz/xhVrzNbIoGrCSduFJpRfTYq5uCxqnmuLuM93iMTPE7JuTEAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$- x \\left(x y \\cos{\\left (x y \\right )} + 2 \\sin{\\left (x y \\right )}\\right)$$"
      ],
      "text/plain": [
       "-x⋅(x⋅y⋅cos(x⋅y) + 2⋅sin(x⋅y))"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(f, x, 1, y, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAaBAMAAADmhQeIAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAInZUiRDNmWbvRN27qzJGkhbKAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABZUlEQVQoFY2Svy8EQRTHv7tu7R7rbv8Akgs12YhOobmWbDSai2yiUW78SIhmo1ApKWhccokQhRPlRkGiVQiloFCJcwqNwpq3b5YM1nrFe/P9vk9m3uwskBNG9cbLQQATZjMXKte191zI8v4BAQU6zsncTUs6j2Jw3c2EuiqipZ2LNJLJAAOi14d7GP4fUKcH7aK1CDNUoD1FWQGKcdxGUXExrMpNlruq+w2a5e6CKJOD01V5RwnpO3EcB8A4Q8QG+mX6QBKqNiZWW6KzxtAxYDn6S0/IkqGSqztDZIyyuw2UYPuJWImirSg6obWNayrPlAABAeUKZYp08Cc0Se5TAmYoHTqGR/ULmkebpDzuDKjVb1EgS4TcyXjFG8l1Ssklxx6W0WCVQrqPDXLm2D4Apvo7llwVsl1ckXPEdvcdV5nTwVlqyfTiIwUKpD7w5+ufKpAqelNZSxe/VPopk9BCufhZLIe9D7BERAVG3AzwAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFoAAAAaBAMAAADF3lZdAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarMolUmd1mIrvNRO9/G2jnAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABgElEQVQ4EZWTP0jDQBSHf4ltY1LbBhEcuhQVZ//grGIHcXHQ7lkEN6ug4CKdJDhIcdUh4OikODl1Etw6FQdRHAQXsYKTIPFe2ubdXSnEB7373vt9TZP2CiQtozLvJnUBC1YtuV1oOt/Jbdv9jw2klTsJBn6QEyWr8lOa3kA7VxKRcy3nW3Kj8bToL7HGU6PB3EcjLpzb8i7PrTozkFM62FXkw7DNRp5RUKaktHhVWzwpvW4/dNPRybGKJ3hfvHrM1zY/wzCsAhtdu2rORQeA3t1jtiutzbOySC46th2YP0P0SMdAzLGd8sxgisTtjp1CthHRB9Bjy/dP331/huZZzNK2TgtVoRRtwo45vjawghoFz7RQvQSGK7Z7iSX7AG0KundSbC4iTf0NEDPbxhd+KT2nBdhZPkKLQHxHMbNtNvBG6R4twPhE5tAjeJSY7ayHBUpPaJFqeElq9F/eqcmhYHFwpNJOlXrkyLuTZB2v9AGKfRMeKH+baOzUOdXIDjqDPwhITQTfXF0CAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x \\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "x⋅(x + π) "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(MyFun, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFcAAAAaBAMAAAAwIN3tAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAIpnNuzKriUQQ7912ZlSugimNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABsElEQVQ4EZWSvUvDQBjGn0bTpp9mEBcRS1cVOrg4WXBxkiKIk9K1iNhJBEH6BzgEHcTJzjrYxUE7GBEdRPzaXCS4dK2K0EGI75vL6V1c6g2X53ne3929OQ7oceytV3skCctjrHe4i9Fyz/Tzf2BgU9k4puiItNmbp0p6p+iI3GY/6ACxwmTQeK4WIRSb8YirmDaGkOhyvqsU/8gp2nhh3gFd9SEXJzTCetDsE3Ds+zQ5WLOp0tCqOVezKUfYFWCtDFhFrRqB+x5+quekjBqQvK0ubolUwje+778DiYqEzS9SvNbAtRs+gBBObLSXrspAtijhdJ5U2gMecW+vijSEl3GRIRa5poiBAotUHShjJsiMVuvsqNWqsCnFHZrNDmsa2TzPDAPcUDBkz2Ylzd5qBCnQRsymnj3O3rAvUgkb3gAHsg2zhgyd1O8iORvvoKbDB85AnZJsScTDhQJdNV9O7nOnYXkilTtfIsXLDVfE077/QcpqIjnuvr6IEBKeQ5zhtB3m4edEsxIOw2GtCNBbUUbkIemvjP4wcpKyErGS6kgno4FS73cUE8iRaPDrH0P5DbB5XUErNFewAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$2 \\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "2⋅(x + π) "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(MyFun, (x, -1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAB0AAAAVBAMAAABI7vhRAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMom7q0QizZkQVN1mdu8ilFydAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAArElEQVQYGWNggADG/2DwAcplYBaAsSC0MCqXwRWVz1aAyucIQOVPR+UydKHyOTcwMNwDOuAHVJjpAAOT6iKZiyBHLAVibgYGKYZrvCAu73MgcReIGQxYJgDJTH2g6AYgg9EBqAoI5jsw8FwA0hwL+MF8jm8M3CCF8yfwB4AE2H4wLALR1xn4FEA0g/2EShBlxcCiAKIZ4m81gGkYwf48AcYE01xfULgMDNuQ+ABNKSXv/6/ABwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\sqrt{\\pi}$$"
      ],
      "text/plain": [
       "√π"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(exp(-x**2), (x, -oo, oo))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = var(\"n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAADsAAAA8BAMAAAAqDt84AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEGbNMnbdVCKJmUS776tmaRzpAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAB+ElEQVQ4EdWVz0sbQRTHv7tZm5iwWa8eKls8eCoE/AP00Fx6MSfBgpKepcRDydXtSaSBBCQ9tmlLRU8KglBQkJ4jbcHeCokHwVvjrxgRO87s7sys7Oz03HfZ7/t+Zh4zb3YYgIYxDgw3G0yqojgLNLGnQr5XBY7geEm8iswA9lIyts7wyNViu5SMaXFHU/wfS6Mb24nWtl7KbHXqC23LR2lg7PNZJIvLof8ATxEZV2ILYuXLZNo3jbcLnbs4zpMyN82KaLuYjcpfjpE94FLiGeJyExtcSTxEBtyEGar8Yf+Em9/7XCm/j0lL6YdmjlzrMD7cjeh4ihR02Ojc6DB4YxMGZcnPBBLYFXlWcOQJ9sJJ9bJ29rynw7lLHcWMOGc5bPT9cZgYv6QrVAvroU61hCnFLerTQdaWplRPOM7K25iWGHgXJE89YU4IBYR3OLKr9I8Iro34SV3sythqMefr6epCCZmu5dFE7mrlT3AjGu2SMUDt2XM2PXUx6ccrehL+P2lt/0bmEh1CKMWWPCByzgzDuIXZY0od6R7yB2rE3HwBjhssWzXIbmAZDRXxPdrrNdNLxLtALdo+PpC9Cppgr4IuqjFofiq+EKYC77u2l23T+AbE8ZtZOKIFcYwT7GuK02dg00ounulh8TWfHi+e62LODTF7FR7GPfuGrITXoWtvAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\sum_{n=1}^{10} \\frac{1}{n^{2}}$$"
      ],
      "text/plain": [
       "  10    \n",
       " ____   \n",
       " ╲      \n",
       "  ╲   1 \n",
       "   ╲  ──\n",
       "   ╱   2\n",
       "  ╱   n \n",
       " ╱      \n",
       " ‾‾‾‾   \n",
       "n = 1   "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sum(1/n**2, (n, 1, 10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJ8AAAAPBAMAAAAIUwCQAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMt0Qq5nNdrvvIolmRFQZ56HIAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACWElEQVQ4EW1TP2gTURz+Lpe0yV1yjS6CU0EHQdBDdKhLT0hQB0kQT7tIoyg4CA0FF5cEQUEcDNpBHKwIgoKgLnUIaEBQEIfDzclbnVr/lYq28Xu/d+8uAW/47uX3/Xm/37sXIHks4LBZ8/3MNz+ct1wJmMp/3qNua5cISuvn1cJqAuEpH6vD4bAH9PtVj6vfAnD6cxElYtiudiStYcR98PQPCczt36skuQAH2tZ9rNTDkzEeRflp90IY7hPAIZS3IAa7vkC1ojVkbmBSB+YlFosBjgPX0QQeAxdR7BY4cFMAndheN4YOAxWtIXMbHrpkvQtAzxvEQABP7eWBnAA+R4rUHTBQ09JP5jZ8EuhOBPYG0KkCbhUTPd32S/US8P4aAwOF1hodSDeFZuT3V5hylSXVYQQ8AabOvTpLhdM1gE8DY2Cg0FqTT92GR9F3NuEMGMgzvE3fCWD2MkoxJ2a8hh01bpqOLLTWZG7D04JrcMHAmchqxHDWGLiGwl3guSIF4G0ZAzsUOtGkbsMrz/zDDyrQPvOaZ+i2OPI0ypvAiiIFgGU/61DoRJO608AbLO1sq0A+8z5yXV7KFsr8CntUScE2HkacBQqtNaPu5KPcARqVWq2x9ILOSxw3AIrSof2TFQX20B8LFFprRt1JIHPu0VgK8NV3vgFfmkCFZ9hD5RfrAkvjIwutNZlbjzzb4v9ikuePqS4W/eIAWFWd3sJMDO8PVwIfMXYPNS2azI38ze9HkWvCCes+UFjYaLt9dfmexgQ3PMJr+IArgUo4F2kDji3vbmtaa1L3PwhG4t9S25VwAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$1.54976773116654$$"
      ],
      "text/plain": [
       "1.54976773116654"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sum(1/n**2, (n,1, 10)).evalf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJ8AAAAOBAMAAADDD9M1AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMt0Qq5nNdrvviSJEVGY9pkAUAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACk0lEQVQ4EU2UT2jTcBzFX8y2tkmWVVAEDyI4PPknTD1sl9ZZkHmwOSxTUXFgDxORlaEIetgQREVBwV1Eh/EwhKFYVFA8aBE9CIK9uktz8jJwuEJbxS6+3/cXdYG8vPR9+trfnwQwtkEOa+ERr4afSDDqAW/mb6lsI2A9Pk4jjMjQpRNJIs4OJrKwF45Wgb1jDZXA3oFhXtbltQyUjfswfSzXeN8PnMNARTMa9NGVJOJewvqNfXA7pFO6sMfHdd5N5bWMAFeR6iA3TqIf7lZYMxBGxI1gJom4A8A9TNfMJv4V1jlCjvhbXguTZ3AeoG8c2FJCOo/eBoQRYbupE+0eeihWPlWxpvAM1GH15EXMNjCd5Qf1CAhL6PPhdCCMiNP2unWiHWerSLx3lV9JhtzcfKEKXFaFStQ/5L2zi0ClhBwLVyGMBoutkzqBOPbs5vk+ouhCsxlhDnbELpER4HYE4/x+4C1KeBfCaAmjQVjxWZ1ox3lqAZsKalBJYQwc8yywUGSwahRrTOs1hEnhL1MxewTE4uu4Kol23B4+6d41q7wCLFeXVKGIeeSpzGGm4VZYmAvhtCCMiOujflcScewKeAJcnL9zuJ2FS2UW2kpUeMozskh3XoGFXBT+umIikYwHWyfiAPZiPaeJo0oW5Qrhz4VCcfaJkpCFE8g1WPihUPh5KD0DtwHFVEVyzA9LIg5YhP0i9tYWfuH8kMrktXz17B/qJqO2/SzcO+gehzAimQpwUxLtjBApb/b/kPk8pENzjkTfjJYpLx3BjWQfgptyJwY5fsWIOKfhlkm2od3zIBjGd9mHXTdWDsoSzY9mge7JdlnEWlAP/8dAvRzG4msYusgNBGFENgQqV4m4yThuwgn4cvgD7JcHMP0mipYAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$1.64493406684823$$"
      ],
      "text/plain": [
       "1.64493406684823"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sum(1/n**2, (n, 1, oo)).evalf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC8AAAA8BAMAAAAES/6qAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEGbNMnbdVCKJmUS776tmaRzpAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABTUlEQVQ4EdWUv0oDQRDGvz2OuCp3p29wYGHrG5jmGqtUAS1MmcLGQtLmLAOCB5IHULCwEwRBMSi2prS0sBHS5YIWgSSsu5t/u3eTOvpVu/O7mZ05PgaQYlvAajNRR1tRGWjiyQ7qWw14RxDnSQ28D++YAm4PhXAB8EoUkKUCstTCx2W7d/lKjd1rOeBlHvzBSEHMNTD744/ie1OpLqpFEwDdob4/iw07jsoEjDLxfw4eOo3DsWEyAybtEuvrWW3g3n6A/xCAsQGclABYSeG/UMDfQRDqH22/AS9BHYlKyYDzIi6cmAD3wNm2imczdGz5oDv2TSXjK74nxFsMFglRjeetAtq7PfjKwZZ3zY+WeVabjpTadLTkppvJuYoOZhcLtEIvXmtLvQImOC0j0F5RaSbAF1pkKbnablyqFE9xdDJNMUutf2I/nAC16ab6Bb5Fqza9cvQLAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\prod_{n=1}^{10} n$$"
      ],
      "text/plain": [
       "  10   \n",
       "┬───┬  \n",
       "│   │ n\n",
       "│   │  \n",
       "n = 1  "
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Product(n, (n, 1, 10)) # 10!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAOBAMAAADgeEClAAAAIVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADdcGRXAAAACnRSTlMAMt0Qq5nNdrvvxbMB0AAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABtJREFUCB1jYGBUZmAwCVvMwMDAThbB0rnIHQBAqQoWQ8kakgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$1$$"
      ],
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(sin(x)/x, x, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKAAAAAVBAMAAAAz5vjYAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMnZmzRC73UTviSKZVKsmUdgqAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAC6UlEQVQ4EYVUXUgUURT+xt3Znd2ZWfZJoRcHe8o2kwhfKlrKeguGfoRAZIuMQpC1lyWkWCQIe3G1oqKSIcQHoxj6RShYTCh8qMGXMIIGpAjpwS0yUqHOnZ07P9tKB4bzne+c892fufcCtSYHCTMY1MfBklAvL9/GAfNDwaAubrACtKRVA/mqT6qGj4FQeTDh4Q8eYsCdjbTus0d9yNCBcPhPJGZDVFSvhq5jwatQAXa7odQe5nmkhPlImSc8X/KQAxLuWKoW5nmU4MD112tiSNkwE3VnsJHgpXA59kPY3JJ9Mo6mO4/aNEoqBiC2fN70AIdnINpI2kSScUFxbspCd8sbp4/4OSrPaOgBmgZkGvwhuoA8LgLjmrBGBWxGCtq01zAWEFlGJEskGRectqRRYRAxzekDzQhJtYS9wL7JDNXtxLAOA/3AWeAHEXEL2IXt5qJszSKVg5pncr5gJ9TbcQNCxekDLgAvlSy+QGY6wHvEV7aCCZ4GvhORKAJpnKKFYAwJDcIykUqhcP5GoWATu0phMw266vQBNwGdysaI7tZZDuLEn3KNYFVa+onmNKQSVZG5SxbYoJ+KwIrT5whiRBcqgGxQCsN4iiOVgGCURoe0hmOghWwhoTwr8wRFdgXYDNedPuAQxbNooGGHaFFsyfPAYkAwpkE8k1qm/YjZjI7kqIqM/5ROgokypIrTB5ykXD+rpZOfItyBBR19bAMPVheatKFWukuSBcWW6C8pGlWRccHpdtwXRhE1nD52TIC3GGlH42TrAOEZXNnRWmy81dv4+0THL5tWm4c4o33cQ/u/lKFzFDepiowLit+mTLyY+ur0EX+Zvp5770wY6rUi4UH6wsaGcS2ZBZ67mAvyHPfxNEMTPJTzHHmevwa01cct/62gLaprkTL9PfEuz9W8FYyOmW7yHJboLOTcaEPXh7iWMnj6GQe+F3Muns8USV73M/VRF1S62dx6OQj4xwFMt/B/xl4EzyIm/gJWqrReQv550QAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\sin{\\left (x y \\right )} + \\cos{\\left (y z \\right )}$$"
      ],
      "text/plain": [
       "sin(x⋅y) + cos(y⋅z)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFMAAAAVBAMAAADInc9CAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaZq4lU72YizbtEMt0MBTtrAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABq0lEQVQoFXWRv0vcYBjHP7l4udO7pKF1EKQQrELdblCUUqjURVDwKN7Qm0JBHD0cCoJC0MnJFKFuJV1EnERcuh2CLXTo6V/gTYKbKA5FjvbJJUfeHOcDb/j++LzJmwSeHF9tUkYtQp1x1eRMNd16ORWkN6YqtCDtv6et6nRPdbCdtqrLqUZ0zu4KEvs7kW014KG9chgUo01WXF6MvMV8PRKIn5T1fPRlxY2B7AxZo8auxPtucdO8oeAMQ1P8oaxS5r3ejIF8wFc9YF7iI4x1q4zZ+mVTFn8NeT/zt8+LAaOJnXNYk+c/SH3lwoP1OC6SDTApBHQA8xYattmS+E7q1To8atV/pQiFZ46oCCjW4A0ZuWr3EoZ3vf/CkGzlQBYNX7NjQA7AKYUZSY/AyJUotj7BnPgTGK4vku0A+WOYoOFJte/x0dxkoLxi80P8kpzncoqfHUB3YPDDO18qbbbis1dZ4HxrrC7+D/KVjWm3A1ghRDW8dI91kSQh8A30QPuchInKl2IdA9NgOX3lBFBUeOBwIqD/WF5bfnvPkR/cnggo2D2hKOz31HIH/gONNVvrYHv5qAAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$y \\cos{\\left (x y \\right )}$$"
      ],
      "text/plain": [
       "y⋅cos(x⋅y)"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(f, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "h = var(\"h\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFMAAAAVBAMAAADInc9CAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaZq4lU72YizbtEMt0MBTtrAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABq0lEQVQoFXWRv0vcYBjHP7l4udO7pKF1EKQQrELdblCUUqjURVDwKN7Qm0JBHD0cCoJC0MnJFKFuJV1EnERcuh2CLXTo6V/gTYKbKA5FjvbJJUfeHOcDb/j++LzJmwSeHF9tUkYtQp1x1eRMNd16ORWkN6YqtCDtv6et6nRPdbCdtqrLqUZ0zu4KEvs7kW014KG9chgUo01WXF6MvMV8PRKIn5T1fPRlxY2B7AxZo8auxPtucdO8oeAMQ1P8oaxS5r3ejIF8wFc9YF7iI4x1q4zZ+mVTFn8NeT/zt8+LAaOJnXNYk+c/SH3lwoP1OC6SDTApBHQA8xYattmS+E7q1To8atV/pQiFZ46oCCjW4A0ZuWr3EoZ3vf/CkGzlQBYNX7NjQA7AKYUZSY/AyJUotj7BnPgTGK4vku0A+WOYoOFJte/x0dxkoLxi80P8kpzncoqfHUB3YPDDO18qbbbis1dZ4HxrrC7+D/KVjWm3A1ghRDW8dI91kSQh8A30QPuchInKl2IdA9NgOX3lBFBUeOBwIqD/WF5bfnvPkR/cnggo2D2hKOz31HIH/gONNVvrYHv5qAAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$y \\cos{\\left (x y \\right )}$$"
      ],
      "text/plain": [
       "y⋅cos(x⋅y)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit((f.subs(x, x+h) - f)/h, h, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABMAAAAKBAMAAACkp3isAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMnaZZhC7ie9EVM0iq905P93KAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAb0lEQVQIHWNgEDJhYGAIMQlgYGBJquhk4NoZWMjAcJiBdf+EtQwM7AwMBQwMEb82MDAwTmBQYGDg/D8BqNwBxGSovwAkFMDMbV8YGHgWMCxkYOBdsH8CA3sAA3MAaxJD3JcYkOm1uQIMDNq/FzAAAO/uGCbPqITdAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\infty$$"
      ],
      "text/plain": [
       "∞"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(1/x, x, 0, dir=\"+\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACMAAAAKBAMAAADMVPqUAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM3dMnaZZruJ70RUIqsKEj5BAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAgElEQVQIHWNggAHXdCBLPF0AxmdgYG+dtZqBR1tkCkLoGgOj/oZzDAycCKEJDAxSfxQYGFg2MAgZg4AJQwADA/f/DUAlBXBlQCGG+Q+ABIgBASCWxncGBt4DUAEGhiMMDHwH9DcwcArAhdgEGFsZhL/LglwHA/P6HBgYgj4dYAAAf14ZMFtvYvoAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$-\\infty$$"
      ],
      "text/plain": [
       "-∞"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(1/x, x, 0, dir=\"-\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$1 + x + \\frac{x^{2}}{2} + \\frac{x^{3}}{6} + \\frac{x^{4}}{24} + \\frac{x^{5}}{120} + O\\left(x^{6}\\right)$$"
      ],
      "text/plain": [
       "         2    3    4     5        \n",
       "        x    x    x     x     ⎛ 6⎞\n",
       "1 + x + ── + ── + ── + ─── + O⎝x ⎠\n",
       "        2    6    24   120        "
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(exp(x), x) # this is a classic!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$e + e \\left(x - 1\\right) + \\frac{e \\left(x - 1\\right)^{2}}{2} + \\frac{e \\left(x - 1\\right)^{3}}{6} + \\frac{e \\left(x - 1\\right)^{4}}{24} + \\frac{e \\left(x - 1\\right)^{5}}{120} + O\\left(\\left(x - 1\\right)^{6}; x\\rightarrow 1\\right)$$"
      ],
      "text/plain": [
       "                         2            3            4            5             \n",
       "                ℯ⋅(x - 1)    ℯ⋅(x - 1)    ℯ⋅(x - 1)    ℯ⋅(x - 1)     ⎛       6\n",
       "ℯ + ℯ⋅(x - 1) + ────────── + ────────── + ────────── + ────────── + O⎝(x - 1) \n",
       "                    2            6            24          120                 \n",
       "\n",
       "        \n",
       "       ⎞\n",
       "; x → 1⎠\n",
       "        "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(exp(x), x, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$-1 - \\frac{\\left(x - 1\\right)^{2}}{2} + \\frac{\\left(x - 1\\right)^{3}}{3} - \\frac{\\left(x - 1\\right)^{4}}{4} + \\frac{\\left(x - 1\\right)^{5}}{5} + x + O\\left(\\left(x - 1\\right)^{6}; x\\rightarrow 1\\right)$$"
      ],
      "text/plain": [
       "            2          3          4          5                         \n",
       "     (x - 1)    (x - 1)    (x - 1)    (x - 1)         ⎛       6       ⎞\n",
       "-1 - ──────── + ──────── - ──────── + ──────── + x + O⎝(x - 1) ; x → 1⎠\n",
       "        2          3          4          5                             "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(log(x), x,1) # this will work, however "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALUAAAAuBAMAAACc3EUaAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMt0Qq5nNdrvvRGZUiSJhVD6/AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAC80lEQVRYCbVWMWhTURQ9yf9Jm5ik6eDgEBp+7SAuARVdpJGiDqKUUqsIhbgJggSUlkyNi6JTdKuL2R0siJSCSJfgGqQ6CWYR62JbCwoVGu/7/7+X+/Ob/DybfEjePeeee3Lz/vs3ATSu8xtTGmo96TRm9Ao01HvYSmvItaRvBugNfNTqRUscGteSa4k3c1pyHXEqH2ro6HW0m6NHB9C4sTiV+YKXzaZOKz1qI3hQHNRz8x5LjSs99qErS+ORbomG/k/v2u+rF3oXkzK+j1NBBYmqo7iKEpJBYpU3nprbqCvYIai5/Cg+I1TuIPLRiZ0zlfi6j/YSRkHhk8CqAgGBcaNYexegwfCKVCwUgbB4yg47f87ObzimP6Q1jMfAUB44PberuP8JkreBS3bhfKt8LA1D2A5J77j6Tkp0AOXmXrmrcYeCWF2gPUk9wxZZ3SWovBNFN9laDqDc5Ad3jWYpoENEeyt7xDjWcsBN4g7n/bVKFskd4ZOlN/vKLF6jtUQvn7cz82xVYN+p30IXEdthFgBWitfUu8+bzbxA76Q9CsL75D1cpg9h45Lup9+bzbxA77DYDUxW6C2aB1gptqrSO2JZJ55bFuUhZx6jRprq2ibFjGUtW9ZxikbsG7hUpzA83SoliMmq9CbQalLNvBYl1Pxyz0lYfJSxLDKib0CV2n9lfPvNZl6gtyn6Nu2Nsb3ZuBxr+PvmMy/QO/SXvO1zCLMMXnrgOeEzL9AbpTTO3SN/6rECXoo1+kJPfl22c3K/+cwL9g5d/HTLKY/vgpdi1qE93p2ob3MPWcq9l4zBCw6ceaKY+IoKZcCoVN7dVycnZ5VU0srmICF7DrJst9DMIVbpJsAxT/ZI3gO7gtguTPFod77MdZ4LNzjqHptZ9xx3lBkFnur599Ipsh9CXt8W1xhOlRnoIRwrdhfJ/ydClcx117ZnJ9qJ/uHIdP+82p3ethP9w4k6fvbPzeuUAe57mb6h1MT12Wzf3LxGUfpVK3ipIPQP7du/jYo9+ccAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$1 + x + \\frac{x^{2}}{2} + O\\left(x^{3}\\right)$$"
      ],
      "text/plain": [
       "         2        \n",
       "        x     ⎛ 3⎞\n",
       "1 + x + ── + O⎝x ⎠\n",
       "        2         "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(exp(x), x, 0, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALUAAAAuBAMAAACc3EUaAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMt0Qq5nNdrvvRGZUiSJhVD6/AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAC80lEQVRYCbVWMWhTURQ9yf9Jm5ik6eDgEBp+7SAuARVdpJGiDqKUUqsIhbgJggSUlkyNi6JTdKuL2R0siJSCSJfgGqQ6CWYR62JbCwoVGu/7/7+X+/Ob/DybfEjePeeee3Lz/vs3ATSu8xtTGmo96TRm9Ao01HvYSmvItaRvBugNfNTqRUscGteSa4k3c1pyHXEqH2ro6HW0m6NHB9C4sTiV+YKXzaZOKz1qI3hQHNRz8x5LjSs99qErS+ORbomG/k/v2u+rF3oXkzK+j1NBBYmqo7iKEpJBYpU3nprbqCvYIai5/Cg+I1TuIPLRiZ0zlfi6j/YSRkHhk8CqAgGBcaNYexegwfCKVCwUgbB4yg47f87ObzimP6Q1jMfAUB44PberuP8JkreBS3bhfKt8LA1D2A5J77j6Tkp0AOXmXrmrcYeCWF2gPUk9wxZZ3SWovBNFN9laDqDc5Ad3jWYpoENEeyt7xDjWcsBN4g7n/bVKFskd4ZOlN/vKLF6jtUQvn7cz82xVYN+p30IXEdthFgBWitfUu8+bzbxA76Q9CsL75D1cpg9h45Lup9+bzbxA77DYDUxW6C2aB1gptqrSO2JZJ55bFuUhZx6jRprq2ibFjGUtW9ZxikbsG7hUpzA83SoliMmq9CbQalLNvBYl1Pxyz0lYfJSxLDKib0CV2n9lfPvNZl6gtyn6Nu2Nsb3ZuBxr+PvmMy/QO/SXvO1zCLMMXnrgOeEzL9AbpTTO3SN/6rECXoo1+kJPfl22c3K/+cwL9g5d/HTLKY/vgpdi1qE93p2ob3MPWcq9l4zBCw6ceaKY+IoKZcCoVN7dVycnZ5VU0srmICF7DrJst9DMIVbpJsAxT/ZI3gO7gtguTPFod77MdZ4LNzjqHptZ9xx3lBkFnur599Ipsh9CXt8W1xhOlRnoIRwrdhfJ/ydClcx117ZnJ9qJ/uHIdP+82p3ethP9w4k6fvbPzeuUAe57mb6h1MT12Wzf3LxGUfpVK3ipIPQP7du/jYo9+ccAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$1 + x + \\frac{x^{2}}{2} + O\\left(x^{3}\\right)$$"
      ],
      "text/plain": [
       "         2        \n",
       "        x     ⎛ 3⎞\n",
       "1 + x + ── + O⎝x ⎠\n",
       "        2         "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exp(x).series(x,0,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMQAAAAuBAMAAACFV6u8AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMt0Qq5nNdrvviVRmIkTkPrJOAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADjklEQVRYCa1WTWgTQRR+m93NtptsEvWighhWLx7EiJYWLw222oNCSiWKRST21Is0aKEoSCOC4EWCeOlFA9pLPZhLEQRxDyKCVIL2oB40BS9S0baKiljjm/3JTrIzSZbuI5l57/vmzbfzk5cF4Jk4N5jicTke4Q+XQU5yMpQVDuETjle1VU7KckAS0RRPQrwYkASAmmSvQhEDk9icYks8CUxCu8ZW0IzAJBZhB1NDmJv9U2YyfkHt6qYTnBztO4foHO6d3D9X7q7VPKcqTg1sfwDw4seGVzGsDLF/djJM5kc6f1T+yGhFWZcMFr8A05XjLMIvJkBXjp2TgOtswj8az/NyfvEIL/7+6ysvWEe+VcRUPaCd2DocoGOWH6la6Oe1EgB+WNZXzYDKIsSb0govyR0/b7tLpN/q4rT3dMtpWKYBx4+s9hRj7e6rmLOHLy3jTkTZW94zFTnDnEg8lZ9/6ejx+i7DZj69OYbeLvwKpNm49Y7eN8xZ3rlz7UR3EuDgyY1XA5xJPQdw1Jx81JEoQ38VoB93S2kvETOctOb+iw2I4+h0l0j0jzTEVuFjBSBsdCQRYZ8ZTvMIv8TCSWzwuuG+15+4RDYJ5EJAEg+rOJtK/uuVJDamHbpcwl4pBiOh/SSTymSPpByAXZAJBjFcVQdn0XajVLOuhNZxyq4CalEFWcClBSERMl+H+nFPIJwGoAuyhkuzJMQxnVgCB0HNNYxkXd9zS9fT6MZdgpzsiK7P6PpuQphnPF1CNzQMQBdksS6BJN/ablSIKIozZAayCgC3IJOXsSA2SiKrkMzdMiWogizgAQUhIfxFCfPiglSAhoIc1I2CSwnoO48y+MRFaCjI0SJIN9aGTK5F0/YsQDgye9aaAJ+6oSDLac7EWnbcvFwWXZewYQFvjWVOAXFi7O9QPrphAxuWLYKKl82xehm04VDaYZwy6MTY1yuthZFKy7QBAPMKNpE2fCHdhNPhNjoAeNYYutHdFGQqbuh4Fiw8TzsAo5fKDeDehogKDgNkElRsuxasWj8vL20iYo4mOP/d1pB99EjXR/hKSwlw3kDMnLdupscT3BpAcwhrRmuJSJVKuEf5zS4pZwxDWLXrEIP1B2XZwxFeCEgiyl4Ewlo+IInHoFUY60D4w+Bg5naJwfmEhBIoKW+ODXenvZRv5HU2i78Bj9lwvOBh/AMTtZr5UtGUacHyxO98E9Eq/A/xge/7THJr4wAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$1 - \\frac{x^{2}}{2} + \\frac{x^{4}}{24} + O\\left(x^{5}\\right)$$"
      ],
      "text/plain": [
       "     2    4        \n",
       "    x    x     ⎛ 5⎞\n",
       "1 - ── + ── + O⎝x ⎠\n",
       "    2    24        "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1 = cos(x).series(x, 0, 5); s1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF8AAAAaBAMAAAAj950ZAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarMolUmd1mIrvNRO9/G2jnAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAB90lEQVQ4EY2UP0hbURTGv/fykmgkGqXFoaIhDjpp4iCIhbxSi2MEiTgUEro4iUERI4KtOJgt2qGDg7zdIVlFCwGXdsskdEqGdm2r6CLY9Jz758UXIubAPef8vnvOvTeX+wJ0aC8XE51VrqqyHPLwd9ASyKmiB5Rsq/x8x5AuOaIGfNb0dDxrTi0DXZEmejJjLD0jhFDd1a09wIy76E3e2/BVWAouuBOntLpx7aJIfigcKlPyi6GvqiSE4pYDfNco4weF3zgm2aVoWWmnc/OU72iUUTX4HxgzNrlxzoT9aTQoTtAYGH2RzgoNqqFUYfzIp3lNw4gl3i2xQlajXXLmVPCTIN2QiTIWHXLnNIIYjeYpsqVsdDvmve9QotqhaBMa/1i7pHGMSUdeMlCqwkJPhaeQLxR+Fwr7lDVoX5h3LB7QsHHBqbARPmdfVAL0kYrMw3X2vANwIzy7kk2u5hi8JJk6UpIxabMiGsL36GcgSzl4VU26z1Y1pA4BebWYpR/z1fcXC7Keb2ntzS6uFKoG8yeMC0dodO+B28F6OKsqToDBWGBbo2rA282tqqygFY316MoXVY8NncioG5pqr2rUSstb0o9PT3teK4utr7VZqDOrrjMRu+MebAfTHrHL8WA7cL9pMdnBN+3+a3BDqNxuzRZt9RH7I8B/WthgwjcfyeIAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$x + O\\left(x^{2}\\right)$$"
      ],
      "text/plain": [
       "     ⎛ 2⎞\n",
       "x + O⎝x ⎠"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2 = sin(x).series(x, 0, 2); s2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF8AAAAaBAMAAAAj950ZAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarMolUmd1mIrvNRO9/G2jnAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAB90lEQVQ4EY2UP0hbURTGv/fykmgkGqXFoaIhDjpp4iCIhbxSi2MEiTgUEro4iUERI4KtOJgt2qGDg7zdIVlFCwGXdsskdEqGdm2r6CLY9Jz758UXIubAPef8vnvOvTeX+wJ0aC8XE51VrqqyHPLwd9ASyKmiB5Rsq/x8x5AuOaIGfNb0dDxrTi0DXZEmejJjLD0jhFDd1a09wIy76E3e2/BVWAouuBOntLpx7aJIfigcKlPyi6GvqiSE4pYDfNco4weF3zgm2aVoWWmnc/OU72iUUTX4HxgzNrlxzoT9aTQoTtAYGH2RzgoNqqFUYfzIp3lNw4gl3i2xQlajXXLmVPCTIN2QiTIWHXLnNIIYjeYpsqVsdDvmve9QotqhaBMa/1i7pHGMSUdeMlCqwkJPhaeQLxR+Fwr7lDVoX5h3LB7QsHHBqbARPmdfVAL0kYrMw3X2vANwIzy7kk2u5hi8JJk6UpIxabMiGsL36GcgSzl4VU26z1Y1pA4BebWYpR/z1fcXC7Keb2ntzS6uFKoG8yeMC0dodO+B28F6OKsqToDBWGBbo2rA282tqqygFY316MoXVY8NncioG5pqr2rUSstb0o9PT3teK4utr7VZqDOrrjMRu+MebAfTHrHL8WA7cL9pMdnBN+3+a3BDqNxuzRZt9RH7I8B/WthgwjcfyeIAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$x + O\\left(x^{2}\\right)$$"
      ],
      "text/plain": [
       "     ⎛ 2⎞\n",
       "x + O⎝x ⎠"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(s1 * s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAG8AAAAuBAMAAADU71qaAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarMolUmd1mIrvNRO9/G2jnAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACTElEQVRIDc2WP2gTURzHv+8uuTSn10QrdOhypqto2lrQLjnBUBykQaiTYhzE0aDDtVAkItJzUXFQcChHHfyzFMRRodBFcDAgCE4WdHCyUTrFP/HdXa53l/v92oKLb8j7/b6f3/e9d8n97gL4Qz//sRVE/Z/L94/2S/Hc2LgVT2PxJA7HslRoWCmpJ5zEOQ55unH6Iotvs8QzTg3VGX7IZEBPzrQZLl4wwJc1iN8cn7E4IvWCpXdILL5g5R5JAjELpUzjG1gq0mT/6IHZujgzm6KiNFY9i2ppKkUCoaGM55oUy2HUnKNAoOVdpaOSV/EIR9zjvDGDPas0tfCKBqFaMMOof/7RLyTzT66gvzejg33J0ng20qogGxfCWLxW26iFWXq+cuI6PqRlQNscXjfqFAm04ZI2T2Jx1bz8gPf938Qg75NdnFkzd1FElfyz0e8namVOC3dk+2kHY6+futGQBvHG8YYlw0IE2jLNOc6dr45TBvh+kmXkCI8Kvp9IH7aMbD/RvtDI9hNjk/1i+ojtp52MYT89WXjplU5T9br91or0rWv0Jb2MCy0Z3YwKougxsrE3Q/ImV4sYXAcU0jgGfIuWSUaD36HK18aptaQcZBtFVFwKSE1tQt0EaqTxGFCxGKOUB9pQXNIo4V3ehxkTz8AYM9s9lBflSTnjQIPfMddA3uWMNu/DQ2AZjDG/zYZaDc/fT0z8maTWvgTdpXRPqwIH5fSZ4pkalCIFpKYv2teacv5J8ae2LX9KeuyVT4hVYKFL/Z151+3+om34CyekiEnNJkrrAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{x^{5}}{24} - \\frac{x^{3}}{2} + x$$"
      ],
      "text/plain": [
       " 5    3    \n",
       "x    x     \n",
       "── - ── + x\n",
       "24   2     "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(s1.removeO() * s2.removeO())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "m11, m12, m21, m22 = var(\"m11, m12, m21, m22\")\n",
    "b1, b2 = var(\"b1, b2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGgAAAAzBAMAAACJe1CmAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEN2ZRGaJqyJ2MrtU780aW1WPAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABnUlEQVRIDe2WMUvDQBiG39C0xtpqMjg3g7qqo4v0R7g5mEnp4ioiiJsOgq7iJg7ipOCii79Auglu/QmFOogO8b4vJneXfqmkTkIPrhz33pMrL+1DEAQBSg0CluNBKQbP8RcWyiF0enMCJaWNX4S7c9LZr3cepPKljG+qzTyitYEXCZIyhq6bdziLsAXM95KpcStztvd8FTHkt9ro+jhA/SLkqRlYWQWVMIXQBdaBN6Ch9mgaw8zm2t6nipL2DoEluB+OBJlZ1TegVzjvmOqdSpCVoRamNym82sdsFAmQneEqK8INMb2CxtqRANmZd68uyv81hCLoFA/KjnGj1kkRya76/AXynm5XhyBvd3BOM3uIsaD9Zhz3hyDjzKhl7uuNOqqzCfTTxaSIPxchCTH9pUkZVy4JMYWkjKFMiCxDEqYeVibKkmRIwjRGJkvKRFmyDAtkSZkoS5ZhDkplSZksS5JhDspkyaKUZEkytCEtSxalJEuSoQ1pWVImypJkaEO6SMokWbIMCyDKRFmSDItkSdl/keVi+ZfEy7FeEr8BN5qx/N6ayisAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}m_{11} & m_{12}\\\\m_{21} & m_{22}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡m₁₁  m₁₂⎤\n",
       "⎢        ⎥\n",
       "⎣m₂₁  m₂₂⎦"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = Matrix([[m11, m12],[m21, m22]]) # Again, note: capital M for to avoid namespace conflict \n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAzBAMAAAByLKV5AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEN2ZRGa7781Uiat2IjJXVrmVAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA5UlEQVQoFWMQFBRkgAEQW///ZxiXIf//NwYVOA/ECMPGZ0xXgCmCyHMYoPL5J6Dy/QVQ+YtgXKj53WcsoSJg8xh/CMhfgAiA+ZwfGfgPMEaARMB85gYG+QVvDsH5QOv9JzBMgvP5AxjsBZD5DoylDEh87gA2oIMR6hltQNYj+CCDCPJv9dsAFUH8D1YPJgaEPyDxIbV6I8z/4PgwYDCC8cHx8YXh/gNo+IDjIxCJD44PBlAqAIcXJD74FGF8SHxcAyUaRHjybuADpgkE/9q7x0AFCH79//8o6oEcoviqKPnhGHp+AAAQhFDZQEHX6QAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}b_{1}\\\\b_{2}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡b₁⎤\n",
       "⎢  ⎥\n",
       "⎣b₂⎦"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = Matrix([[b1], [b2]]); b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}m_{11}^{2} + m_{12} m_{21} & m_{11} m_{12} + m_{12} m_{22}\\\\m_{11} m_{21} + m_{21} m_{22} & m_{12} m_{21} + m_{22}^{2}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡    2                               ⎤\n",
       "⎢ m₁₁  + m₁₂⋅m₂₁    m₁₁⋅m₁₂ + m₁₂⋅m₂₂⎥\n",
       "⎢                                    ⎥\n",
       "⎢                                 2  ⎥\n",
       "⎣m₁₁⋅m₂₁ + m₂₁⋅m₂₂   m₁₂⋅m₂₁ + m₂₂   ⎦"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJEAAAAzBAMAAABlIvf1AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEN2ZRGa7781Uiat2IjJXVrmVAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACeklEQVRIDe2XMWgTURjH/49c0qQ1zR2iLsIdQRcdjE4KAbM4N4ODmxEFF3EQRBCHSEcHi0sXocFJ2q6KYIeia4euKiKIo0pDK1ixnu9730vv3t27M5hszYOD9773v1/u3r3cj4PneRi5Cc9zcSbcHhmEUhh2cGJ0DhGKYyaJm8FQF3b0TnZMX1O5kR2Jz8zHB2Zfk2oLZjk5uqQLu8mJaKxJc25UsvWectHp2ya5pknPshNqRpOmg+ycJj3auKAyzsrH1bXZ1RvJEzSpvPaWl8GSY5L46fqbdPZ06Rb8y1jMIPkPxZ6asuSYVOmjti6uAF+mOvjUw1XgSJcPZuprWnLxWyy/ds2cquidWejC7319A7h+CzL+ErMbgToIdK5ev1evn5a98xC/CigEZk5VNElup7kFPJHZJYrjAVAJ+JA12fQ1zcPZrbWqf8wcV/juam1cdBXpFXAKzp6wk36g0C+6RIrnuKJJLXEXinQfYgcz3Xd20g6OteVjCQAjpypMmmmXGookf664hXKvZye9wHV5q59dmDmq6HUSTdpOcp2cAIcaqDQ37aTDtJ2q15I5qhhvFVrx/WZdcTX7Ad/2U/xUVIXvjmdySIN/sAxWb38/a5K4EiO9f9yMEtXn2+t0RJVBbyoMtwZ9yZUZrsRI0fR/9Sak4ZbtIKzTxJy0FybmTJpT2ZDsyS3TnJTLNyfZkOxJLc+clMs3p7Ihvcu5ZZqTcvnmVDZMkdLmpNw/zEk2TJEs5lTWJJfyW8ViTrJhimQxp7JmrjnJhimSxZyUyzcn2TBFUstvmpNGueZUNoxImeakXL45yYbDmJNyB8ScJ8fzpXi8M74vxb+H7zCO56XkKgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}b_{1} m_{11} + b_{2} m_{12}\\\\b_{1} m_{21} + b_{2} m_{22}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡b₁⋅m₁₁ + b₂⋅m₁₂⎤\n",
       "⎢               ⎥\n",
       "⎣b₁⋅m₂₁ + b₂⋅m₂₂⎦"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A * b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAVQAAAA1BAMAAADsYw7NAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEN2ZRGYydqvvIolUu82OgL9QAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAD6ElEQVRoBe1aMWgUURB9yV025qLJXWVpItoJVtpoEay0ExSxCWwhBDsVxIgErhDTHohieXY2kthZprONYCWIYGnjobZyzuz+2f07t3v/b3YPc5Jp7t7/M2/fzUnmMR46nQ6mIFjm+eGvKVCKr8M/OOMUOndhY3P+dujMO0BCGep1H6nXri9057sHUOIsmStB7SP19QMsrzV28eH92vEnT52PL5Mg1K2PcFL7SMU27mJ2D72ZwQJOlVHizjXUd1bhpPaS+hJb2AnQD3otEl1rGGqswkntI7U1oL6uLwIn1oBPtSpNqFeJ1kHtI7XZxXe8uQ9cBBoh6oymUJPURoix4SNVCBbbu3hHzZ1EkFQXdRmpP4YrS8OfkxCKjed7TupU6rByDNSnmPl2miPEcmXqIVGnUtVzDh88kjqJ7+Soq5PtqvJjCppn37j1qPvwWSJEweRcv1F5CsbZ6lBBykn/ASg/pqB5+M0XeIXNRImCybl+o/IUjLPVoYKUk0q1/BjetiEw4/xaJ1fwG5fACXQhkP0b2bjCkDwuozyBXEYscZkcFlOnUsXqkR8LrrQh0Di/4AvFZxy7F/RwLkqgC4Hs36isOKwyzjOQy4jFl9qSmvoxzJLUXOe3EM7vtwYhJ5AlhIGRfxsn1Soju2eXMUscVk4+dSrV9mOkJIEZ57dDHZnb32WpbAkFsn8bJ1XyuIzyBHIZ00chh4XUqdSm5ccoPYEZ53cVS/3WdjuSShcCG+F4qZJnpArkMmKJQw45J5c6lSol/LE53US+86MEvpBg/zauq5JnpAqkMpslPi6kHpVKfix4fFnYkOv8OIEuJIn9G5UJLHzlMiuPyyyWuKyYelRq4YP+9cV/KDV/zlZqdFlK367mz9lqUktsVvhBvlKtOcujr44QSh7JPpS+Uq05G43dOrSmmxUvSm+p6Zy1/+pWUqwmuYvLV6o9Z60B4aIfd59QZmdOYYmv1KaMXZp5NUlNKGuWKp+VB2FNUoVSTfLkWL/x7arU0SC0x64cV3lVk7yQqqzUQqLJX0RSk41N9YXNQEuuZwnErNPWVd2Jw4mPujqJ72Vqu6ospIKmVWpFo+BIP9W9gnG6OlTQUGa7qlypgqZErWgUHJGq7hWM09WhgrlSlYUUWGUZZC94Dr4EYrXZroorrXMZVMsSKEeqspCpSbX+r865sTFfmHmx0tmYGMh8/aA3msOHVo61XljHWeunC8pCJrDKMshe8JBUgeWWQECns5X56UJTXGlsIRNIJrURwoRzYyOJ8audTrQCG2GZJRCiny5kiQ2KpcpVLcsgdrlEK1FuCSRVo6/KQtaxDKq2BIok/gW1IRXtQj0J7wAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}\\frac{m_{22}}{m_{11} m_{22} - m_{12} m_{21}} & - \\frac{m_{12}}{m_{11} m_{22} - m_{12} m_{21}}\\\\- \\frac{m_{21}}{m_{11} m_{22} - m_{12} m_{21}} & \\frac{m_{11}}{m_{11} m_{22} - m_{12} m_{21}}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡       m₂₂               -m₁₂       ⎤\n",
       "⎢─────────────────  ─────────────────⎥\n",
       "⎢m₁₁⋅m₂₂ - m₁₂⋅m₂₁  m₁₁⋅m₂₂ - m₁₂⋅m₂₁⎥\n",
       "⎢                                    ⎥\n",
       "⎢      -m₂₁                m₁₁       ⎥\n",
       "⎢─────────────────  ─────────────────⎥\n",
       "⎣m₁₁⋅m₂₂ - m₁₂⋅m₂₁  m₁₁⋅m₂₂ - m₁₂⋅m₂₁⎦"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.inv()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEoAAAAVBAMAAAATJmVgAAAALVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAOrOgAAAADnRSTlMAdt0yiUQQzauZu+9UZvf1EgYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAB+SURBVCgVYxBSZiAEgEpcCakByrsiq2JWw6LDKAFVVcb0Zxiq2Drr0FQxMGKqYmCQGxaq0pVAABgFA+NHNvTgxxqqeQVoytBVcax+1MjAhBbjXfs0BFDTBNiUY2hmgbgoKQcs7wAmUQkMVWwCqArAPAxVvFgUAW10IiLdbwUAhmYmOEsehH8AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left [ -1, \\quad 1\\right ]$$"
      ],
      "text/plain": [
       "[-1, 1]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(x**2 - 1, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAABMBAMAAAC2UbdmAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMquJZkQiEM3du3aZVO+tqXQLAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAEiklEQVRoBe2az28TRxTHnzf2Ov6REMEfEPdUVa2UHLi2tZC5AFL9ByBhcUC0QsJto6qoh/pURA9giQOyhEi4ILjQHJC48MNUipSDpUTiWgmkHip6KClqSYAid2a8a3vnvbe85xy4ZKTszLx53+9nPeud3YkM8/3+C0ClLylIFQcWJGqTswXzB2uHY9Wobo+aE7RE6lrtkKE3CPv8ChEUh6TqLEPPLYpRRKJUzdFLVcJUHJKqOXowJ0YRiVI1Ry8QnvKQVM3Rp+UoIlOq5uj7CU95SKrm6EflKCJTquboa4SnPCRVc/Tz6ah5t5KyOVI1R3/HUnmdBbsBqZqhhyup9pn0YbGaoc+kL7RBPQPwHXuCYjVDn9o01pkrnP9pmN25wI6CWM3Qiw2Ab9a3OfoaFJYvN7lREKsZulsqSxw934KARZsBsZqhf2/NWXp5M50uVjP046n0c5BOF6sZ+p1U+kFDP3pvzuaQRaxm6B9YV2rmZ+pmoA1QbIb/kmQbFKsZesuaUPQHZqS0akfhljtSh5YNStRKevjt39FXGmCjYSFUadkgQUdqmp6pMHrIm1d/+/y8aejchZeraXrWzS1x9u4T20XuGcCCPUOqyNU0vVy3riT9bNet4osAf1JkG5Orafp007qQ9OK2GzwDpT9sDlXkaprulsrg9quPsXnuzW82GPY+cWeIE6JvpUhN07+iTKPYxZ9SBt2QXE3TH6cAnlRSBt2QXI3ooTX41APkqqNAoTFqo5ZSjej3reMNz3Zm1QtwXaUa0X+3xm3PXUxXqn169rUBm7eHZJHStWqfvnTNcHPdJBykdK3ap1cXzG1cqk5I16oNfcnw8hc6tswBPDR/bvu9L96ulDuda886nYo9IxcbHrxzNF2lOqx6/7d5UgVAG2DpzINS7c88nO0OH+CjjyamK9WIvm8FAG2/Wbq5aImiUwOiTz8dvD4kTDl6fieRZq6ZRg2YHpgtBNp+c3ToeB9ep8b0knlVHWy/w97P5vvvSpJ+Zn24gZ7x6Do1puf+iRfakzAVvzSPP2UgrMDn9ei0pqI6rnRqTM//B+GKM/sQ4K/YdbwOmjD7NAr8MD5g2jo1psMORNvv501YaHjutju7DcHLKF6N6mGlUhP0S4PtN8BH5rU1vvBDd9MI2hCYt3q66NTojoONZrEROy/HDa8ubHmBYVenxvQv6oXYK/Mmbnn1/KoXGHZ1akw/seq239av0B26JhtXk92xnk6N6T9W3PbbOvbGbMeb5e54L9HWqTF9tuW238Yzy0GOJYCJjk6N6cWtR5HfYwgbCeuoY+7IU1TcxnRqTC+/bA2sM4tQag6ayeMBgLvJyKinU2N69m17YPZlr2dueVzCq71foxQ8qFNjeuZFZWB6qd/3H6BuYNq8WbUGKfioU2N6vs/ezBiGIjo1psPzOvJUBFRqgv5LUwFDqSo1Qf8MOWoCKjVBP6KBoVyVmqB/jRw1AZWaoGtYu8zdo+9yAieW7838xFO3S+HezO9yAieWv/+ZJ39rNPHnkQuX7W+NlmrUb43kJhNn1mq16v9EzCdbtP9PlAAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left [ - \\sqrt{\\frac{1}{2} + \\frac{\\sqrt{5}}{2}}, \\quad \\sqrt{\\frac{1}{2} + \\frac{\\sqrt{5}}{2}}\\right ]$$"
      ],
      "text/plain": [
       "⎡     ________      ________⎤\n",
       "⎢    ╱ 1   √5      ╱ 1   √5 ⎥\n",
       "⎢-  ╱  ─ + ── ,   ╱  ─ + ── ⎥\n",
       "⎣ ╲╱   2   2    ╲╱   2   2  ⎦"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(x**4 - x**2 - 1, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAH4AAAAVBAMAAAByPkciAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEER2zVSJ3ZkiZjKru+/kt61jAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABwUlEQVQ4EaVTPUsDQRB9a8x3ogdpBDUGwToBLVIESWN/wd4ElHSCH412Aa+ykDSCjZjOTmNjJSQQTCf6A1QCYmVjwK9YObN3F29zB0Ic2Nmd9+7t7OzOARCzGM4Oq1K3UBhOjuiNRkp/1y2PbroxFSlnKXm8SWBgQ2UomjI89lS+GtXFriX10MP3l/4UWP+P/h4oaubRh8r/BaR1hz6RmyzrVGGwIsv0OH9iD6LJ5A4NwfqaqQ/lCaj4WiG+xxkO4FV/aQWRV6LEG7nwB9DIwNeh9UkNiFR9vRjNEDTI3PnDuoHYHXMaDakvIfwOXG1RHEU8T1Pf3HqBJ4xl7A8E5U9TdLwEYfCGGO9zHLn1GOmiUWdOGtVf1IG1lNVESFeF3MekPfR0TYsmyf4BONfg79GS3286dYvALyvzW1dho9Sr9Oi2nQEGSTsUs754cYA55hz3by0ZZQs1R755lvePoC5eTKnUT8z796kc+/1jj58tBNV/SLSzfFrz/SFWc3WHXhKDrjAABPIDgExtukGG45ICGkjKEzpB2fqyiZyotRYZBdxGW4k5kK0rnl24BCIqvJxNqQBFyRpDR9fsh7BLEv4A0l9hqfU1wKcAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left \\{ x : 1, \\quad y : 0\\right \\}$$"
      ],
      "text/plain": [
       "{x: 1, y: 0}"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve([x + y - 1, x - y - 1], [x,y])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOAAAAAmBAMAAAAvsop7AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdt0yIs3vqxBEZruZiVQ5Xk1xAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADsElEQVRYCc1XTWgTQRh9rdtkkyYxQVEPLdZIUbBqUK/SWNRePETBUw9W1AoqGPUignT1UD0I7cmDF0PxKFqQKp5shaJgxBTBmzYVEQ8KkSpGUes3M5t152eTHIr4HXbne9/73stkszMTAGhZT5d/EOMFYWJ1Z3W3fbO7dDCeeqmDCmI9X5lUIEpnOzNAotvhlb15nRA5ikei6qtZW/DMl5qH17PtVa3SV45NEHi5i1eGHX6TLiMFPJYAlrSWcFgDFcA+gViXggGbEWLTjvzglW6tDrxwiKQGgQ0jVmWfSwkCRfzkt+NKmaUnYX/X4JMaogOhCYyOqTCBIoSVwdD+hWhFbSOwcYyWcFdjESgi2PA32nPv1EZ6AhEVU/PRMiYTWQVdXgD4tAMNsR/jU7WP5XUXgYavRVsy2hP3OtxBbArxDBsHG17p3HGGU/y98dmU489NY/vMy/4VWuF1ag3Hgg21lqUB/lPDG0szO6bS3Aznl85wA5f61kBwCQ0PMiu+wNmp8zvfsKx1il2lqG94aRp2nvF7pCZzMucQ3pajSwyrk3y1HmWZHPUNS+/FomR/lbuMWesEYE86VLuFtdkLjGOzixx1Da3yDMIkAzhylzGzBxxcT7JSBpN+xvJFFgx5nE4PpdP8YXOs4qfR2KYdi289Lu6R7ANpFhnC/6ohuoA9TwX1s9uh3+rOEJEqeplqc/G2BLzi9MgXXA3oqW8Yy2FVQKMOx48QFh6kL+ZhuAIyN4ZiqDzl9jweGNtM4M0CoRbtOomFa4ORMqM0/pUqjFheHBya+pXeZxY4RTOcTn68w5PG72HrRk6sXeyLHV/4uJn38BhnigWuJiDuVnHA+yV4X+m+mXus+kGmIp7zAy7JD8FTE4cUk2E/4t6ZprZ4W3nMjZGQ/KxnMFL2qddIPgjw1ISVyfA8MCT1UBJ2EBqkrz8pFdbhoj93SX4I8NSCDU87GM7KXQhVEabHFZXh+Q42ay9ckpfzgacWbHgWGM7IXQh3IbygYFpqJHlqwYYktFUTo72kYgBVyEgSavUMl5nWul75+alWIjeRXLV6hoYXsrk9z7gxumrCcJPxg9IhVAs6XzYOI8lVE4Z831eFoibt2yrLlJtIrpot/szMZQ19n2BpcKKE3QaqDBlJrlpcLIKX5cWR9y8rocWRlYCdgDhAqwV/biLV1NaWOdO+X/B38HFfsUgvjxxWT/FJlwzpmZHkqm1b7/IT57TGQ4uL2qGojY4POY2pAEaSq7adcf8Am5fzVnQJm5MAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left \\{ x : \\frac{a}{2} + \\frac{c}{2}, \\quad y : \\frac{a}{2} - \\frac{c}{2}\\right \\}$$"
      ],
      "text/plain": [
       "⎧   a   c     a   c⎫\n",
       "⎨x: ─ + ─, y: ─ - ─⎬\n",
       "⎩   2   2     2   2⎭"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve([x + y - a, x - y - c], [x,y])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_m, N, t = var(\"r_m N t\",real = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = Function('N')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKwAAAArBAMAAAAXqn6LAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM3dMom7Iplmdu9Eq1TIrLofAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAC6klEQVRIDa1WTWgTQRT+NnWzSbsmS3tTi7mJXgyk4qEgQRBBD029qQj1pgdJvZR4kAbBQ724KBQ9iCtib4qiVG8GPBZrTh4CQkDQo/HQilBS35vZTTbrzrbdzYOZeT/f93Z2dmb2AUnk9IckbDW3qw4liJi/E5DVVL2ojiWIpOoJyCpq7dJMWxWL7zffo2rFp6uYB23cUcUS+O9bOJGArqKuQttSxeL7tQ1kO/HpKqbWRbrwUxXdyW8wQHRB5DE8rFcCTjU6AHzFtukEvGxOvjjbKgf8arQArmyXkTu+aiEn5yPggRR9c/foahMYsYBxIk/MI0VqhOwWbf74A+iUaInaLyBbd5Oatqv4ByXaD2JdP7QBrJPymhqfpTfUWHKOGAY7JXoQBmQwDczStypQhM/SURcRmlaJBs7M1S66VBoyeGqjTmMF5tfNFnAlOq0CDTjXKpf7adeRL6ICpGgpcx3yP4hKq0RDs0u42087i8yW2aDN0KYZF8j/nRpL6CKEoMdLLFOG9VfyZF+HsalbwFiDUtOsMcP+TKk0/bZUarLul3C0QAz+7ShTtUZ+TnuYGtaosXizzW97Qk4lmmZSpN25dO7l6JMybYA28IXXJMUKtOhFUKPlq2bX7LHmKL0jv/8IX6ZpB7gAuqeWyWDxZist2avRwGIDuPkc+QbtKUwQXlymOj3jm+YA92SG0LRqNPCJeS2c548/+fEUGZQRZhFYeEzKSWosIbONQEsO3mEFi/tcQwxT0jAovZCQtG6EhyBahowOzXeZb5iePJJaxnY9/qvm/8IuiJYks4kjuP2sl5OU9LywFvy+nt6F5i2O9EWiezRStDlhXfX7PJ22ujjYnh2N7qNYu8VdVs6ZVZ9QYScOts8VgfaholUq7MTBjkbtMcqF3efqDWePtB3gsrCj/9FwRRZ2Q6/tZGE39NpOFHZDr+1kYWd2YA11bWVhpxdyoTs6/qNEYbe/eSB+hlCmKOyM63ZoEP8Afh3MjU6xAtsAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$- r_{m} N{\\left (t \\right )} + \\frac{d}{d t} N{\\left (t \\right )}$$"
      ],
      "text/plain": [
       "           d       \n",
       "-rₘ⋅N(t) + ──(N(t))\n",
       "           dt      "
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dN_dt = Derivative(N(t), t) - r_m*N(t); dN_dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYBAMAAADJzkisAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdrsyVM3vEKvdRCKJmWb3InSJAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACQ0lEQVQ4EaVSS2sTURg9TSeNmUliUkRBELrTXfIDFIPoQoyahbjU6MZlg1JofTV1VQQlUJ8oNEIQdw1dazNSShUE40JElDoI3QjRUgSlPs93b9L0Tpt0kQPfnfP45ps7MxfoEsFKlwOA0a4n4JA5whGpFtNfp44e3NXY/9Pbs0a6TZQdN7wNxZczwXQjOCHX/n8pWKfP5mG5ylaDFGstof7xm46OaToz2d5m9kORZAEI54EhqpEKgqR+bN8B66W36m5xm9TOCbMP/AIiJAus40CsJq6B83cpP1VWvb4SUD9WL8+ip3CJbuTib6BMkmO9ZZ1jmTgpG3vc8qqkjwb6ShlE4y55FHeAee4mS/GQdYplIPJd5L6W94Q0kBrCddgLKfIovnmo8erCvrY8Brxo9WpWLcr1ghaXE+8UCSODnKe9MrYW4QJBamuJ3qLy398X3BP+Oq4ctdgT2KvIMHZirKKDeURX7BJ/Spo7ydI7rP3WOpnS/CrTqsdb/ajBWY7kAfnMYZfpfn/HIFMg35soAsnEq5I/l3dIPqMrI0ZZaz89FTEpi8UDyBE/hftgp4GpjzTlzE4h1HyRNd9CnQieHBnBA7AO8g7hFdqBODCHI8Bnf0+Vifx2GcG/bvnzERqxJS6RAjAeYvcbf4v1F8jk9YhFhD748uHBW3R4N2w+Y/oryQOWiSt7bpToyC56nifMzFATWjls3BgyojPqOo567do2HxGoqHun201w5v7E22UNPzSgyO5N2jrGM5LG9F46Nhrhf4BPhYNESCBnAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$N{\\left (t \\right )} = C_{1} e^{r_{m} t}$$"
      ],
      "text/plain": [
       "           rₘ⋅t\n",
       "N(t) = C₁⋅ℯ    "
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyEq_sol = dsolve(dN_dt); MyEq_sol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x113ff30f0>"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy  import integrate\n",
    "\n",
    "# parameters\n",
    "r_m = 1.\n",
    "\n",
    "# initial conditions\n",
    "N_0 = 0.1\n",
    "\n",
    "# The time vector\n",
    "t_vec = sc.arange(0, 10., 0.01)\n",
    "\n",
    "def exp_pop(N, t, r_m):\n",
    "    \"\"\"The right-hand side of the exponential growth ODE\"\"\"\n",
    "    return r_m*N\n",
    "\n",
    "N_vec = integrate.odeint(exp_pop, N_0, t_vec, args=(r_m,)) # the comma is needed!\n",
    "\n",
    "# plot the numerical solution\n",
    "p.plot(t_vec, N_vec) \n",
    "p.xlabel('Time') ; p.ylabel('$N$') \n",
    "\n",
    "# plot analytical solution\n",
    "p.plot(t_vec, N_0 * sc.exp(r_m * t_vec),'k--')\n",
    "p.legend(['numerical approximation', 'analytical solution'], loc='best') # draw legend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.00000000e+00, -1.00501671e-03, -2.02013400e-03, ...,\n",
       "        -2.13744854e+03, -2.15893125e+03, -2.18062988e+03],\n",
       "       [ 1.00502283e-03,  6.11819401e-09, -1.01511118e-03, ...,\n",
       "        -2.13744753e+03, -2.15893025e+03, -2.18062887e+03],\n",
       "       [ 2.02014197e-03,  1.01512526e-03,  7.96376975e-09, ...,\n",
       "        -2.13744651e+03, -2.15892923e+03, -2.18062786e+03],\n",
       "       ...,\n",
       "       [ 2.13744963e+03,  2.13744863e+03,  2.13744761e+03, ...,\n",
       "         1.09563845e-03, -2.14816243e+01, -4.31802491e+01],\n",
       "       [ 2.15893236e+03,  2.15893136e+03,  2.15893034e+03, ...,\n",
       "         2.14838268e+01,  1.10688877e-03, -2.16975180e+01],\n",
       "       [ 2.18063100e+03,  2.18062999e+03,  2.18062898e+03, ...,\n",
       "         4.31824631e+01,  2.16997432e+01,  1.11834951e-03]])"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N_vec - N_0 * sc.exp(r_m * t_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
""" This is using_os.py"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

# Use the subprocess.os module to get a list of files and  directories
# in your ubuntu home directory

# Hint: look in subprocess.os and/or subprocess.os.path and/or
# subprocess.os.walk for helpful functions

import subprocess

#################################
#~Get a list of files and
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")
# Create a list to store the results.
FilesDirsStartingWithC = []
# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
    for d in dir:
        if d[0].startswith("C"):
            FilesDirsStartingWithC.append(d)
    for d in subdir:
        if d[0].startswith("C"):
            FilesDirsStartingWithC.append(d)
    for f in files:
        if f[0].startswith("C"):
            FilesDirsStartingWithC.append(f)

print("Files and Directories in home starting with C:")
print(set(FilesDirsStartingWithC))

#################################
# Get files and directories in your home/ that start with either an
# upper or lower case 'C'

# Type your code here:
FilesDirsStartingWithc = [] #list to store results
# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
    for d in dir:
        if d[0].startswith("c"):
            FilesDirsStartingWithc.append(d)
    for d in subdir:
        if d[0].startswith("c"):
            FilesDirsStartingWithc.append(d)
    for f in files:
        if f[0].startswith("c"):
            FilesDirsStartingWithc.append(f)

Files_DirsStartingWithC_c = FilesDirsStartingWithC + FilesDirsStartingWithc

print("Files and Directories in home starting with either C or c:")
print(set(FilesDirsStartingWithC_c))

#################################
# Get only directories in your home/ that start with either an upper or
#~lower case 'C'
# Type your code here:
DirsStartingWithC_c = []
# Use a for loop to walk through the home directory.
for (dir, subdir) in subprocess.os.walk(home):
    for i in dir:
        if i[0].startswith("C"):
            DirsStartingWithc.append(d)
    for i in subdir:
        if i[0].startswith("C"):
            DirsStartingWithc.append(d)
for (dir, subdir) in subprocess.os.walk(home):
    for f in dir:
        if f[0].startswith("c"):
            DirsStartingWithc.append(d)
    for f in subdir:
        if f[0].startswith("c"):
            DirsStartingWithc.append(d)

print("Directories in home starting with either C or c:")
print(set(DirsStartingWithC_c))
**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
Files and Directories in home starting with C:
{'Challenge_A_1.png', 'Ch39_Clicker_Questions.doc', 'CoachellaSize.txt', 'CoverLetter_Pawar.tex', 'CE64FB89C00145A616D64AA124AA778FAF47652A', 'CMEE MSc 2018 Lorcan Anthony Karel Pigott-Dix 1183.pdf', 'ControlFlowTest.py', 'C6E62B14F7', 'Charnov, Warne, Moses_2007_The American naturalist.pdf', 'Clodong, Blasius_2004_Proceedings of the Royal Society of London B Biological Sciences.pdf', 'Ciliates', 'Character displacement in some Cnemidophorus lizards 
**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "using_os.py", line 60, in <module>
    print(set(FilesDirsStartingWithC_c))
NameError: name 'FilesDirsStartingWithC_c' is not defined

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
"""Script to plot consumers-resource population dynamics and save to PDF"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import scipy as sc
import scipy.integrate as integrate

def dCR_dt(pops, t=0):
     """returns the growth rate of consumer and resource population at any given time step"""
     R = pops[0]
     C = pops[1]
     dRdt = r * R - a * R * C
     dCdt = -z * C + e * a * R * C

     return sc.array([dRdt, dCdt])

#assign some parameter values
r = 1.
a = 0.1
z = 1.5
e = 0.75

#integrate from time point 0 to 15, using 1000 sub-divisions of time
t = sc.linspace(0, 15, 1000)

#Set the initial conditions for the two populations
R0 = 10
C0 = 5
RC0 = sc.array([R0, C0])

#numerically integrate this system forward from those starting conditions
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
print("final Consumer and Resource population values are:", pops[-1]) #prints final values

type(infodict)
infodict.keys()
infodict['message']

import matplotlib.pylab as p

f1 = p.figure()

p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
#p.show()# To display the figure

f1.savefig('../Results/LV_model.pdf')

f2 = p.figure()

p.plot(pops[:,0], pops[:,1], 'r-', label='Consumer density') # Plot
p.grid()
p.xlabel('Resource Density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
#p.show()# To display the figure

f2.savefig('../Results/LV_second_model.pdf')
**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
final Consumer and Resource population values are: [  9.78000354  17.16658946]

**********************************************************************

Code ran without errors

Time consumed = 0.79668s

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
"""Understanding how to generate and plot networks"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import networkx as nx
import scipy as sc
import matplotlib.pyplot as p

#capture information using adjacency list and node list to create network
#adjacency list describes interaction of individuals in system i.e. predator prey interaction
#node list describes individual properties i.e. body mass

def GenRdmAdjList(N = 2, C = 0.5): #C is probability of interaction
    """Function that generates random adjacent list"""
    Ids = range(N) #species
    ALst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C: #uniform distribution generating 1 random value. Cumulative probability
            Lnk = sc.random.choice(Ids,2).tolist() #picks 2 IDs at random and coerce into a list
            if Lnk[0] != Lnk[1]: #avoid cannibalism as it samples with replacement
                ALst.append(Lnk)
    return ALst

MaxN = 30
C = 0.75

AdjL = sc.array(GenRdmAdjList(MaxN,C))
print(AdjL)

Sps = sc.unique(AdjL) # get species ids...python version of unique
print(Sps)

SizRan = ([-10,10]) #use log10 scale
Sizs = sc.random.uniform(SizRan[0],SizRan[1],MaxN) #range of log(10)10**-10 to log(10)10**10
f1 = p.figure()
p.hist(Sizs) #log10 scale
f2 = p.figure()
p.hist(10 ** Sizs) #raw scale
p.show()


f3 = p.figure()
pos = nx.circular_layout(Sps)
G = nx.Graph()
G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL))
NodSizs= 1000 * (Sizs-min(Sizs))/(max(Sizs)-min(Sizs))
nx.draw_networkx(G, pos, node_size = NodSizs, node_color = "red")
p.show()
f3.savefig('../Results/DrawFW_network_model.pdf')
p.close('all')
**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.01343s

======================================================================
Inspecting script file Nets.R...

File contents are:
**********************************************************************
##Network example of Imperial College Data

##__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
##__version__ = '0.0.1'

library(igraph) # Load the igraph package

rm(list = ls())

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)

#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)

#Test plot
plot(net, edge.arrow.size=1, edge.curved=.1,
     vertex.color="orange", vertex.frame.color="#555555",
     vertex.label=V(net)$Type, vertex.label.color="black",
     vertex.label.cex=.7) 

# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]

# Set node size based on Number of PIs:
V(net)$size <- V(net)$Pis*0.9

V(net)$size <- 50

# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight

#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"

E(net)$width <- 1+E(net)$weight/10

#graphics.off()

svg("../Results/QMEENet.svg",width=7,height=7)

plot(net, edge.curved=0, vertex.label.color="black") 

legend(x=-1.5, y=-0.1, c("Hosting Partner","Non-hosting Partner","University"), pch=21,
       col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)

dev.off()**********************************************************************

Testing Nets.R...

Output (only first 500 characters): 

**********************************************************************
pdf 
  2 

**********************************************************************

Encountered error (or warning):
Loading required package: methods

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


======================================================================
Inspecting script file run_fmr_R.py...

File contents are:
**********************************************************************
#!/usr/bin/env/python
"""Python workflow that runs the fmr.R file and informs the user if successful through terminal"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import subprocess

process = subprocess.Popen("Rscript fmr.R", stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
stdout, stderr = process.communicate()

if stderr:
    print("Error")
    print(stderr.decode())
else:
    print("Success!")
    print(stdout.decode())
#subprocess.Popen("!/usr/bin/env Rscript --verbose fmr.R >../Results/fmr.Rout 2> ../Results/fmr_errFile.Rout",shell=True).wait()
**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
Success!
Reading CSV
Creating graph
null device 
          1 
Finished in R!


**********************************************************************

Code ran without errors

Time consumed = 0.20349s

======================================================================
Inspecting script file run_LV.py...

File contents are:
**********************************************************************
#!/usr/bin/env/python3
#run scripts in iPython
"""script to run the different LV functions from the practical"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

import os

os.system("python -m cProfile LV1.py")
os.system("python -m cProfile LV2.py 1 0.1 1.5 0.75")
os.system("python -m cProfile LV3.py")
os.system("python -m cProfile LV4.py")
**********************************************************************

Testing run_LV.py...

run_LV.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
('final Consumer and Resource population values are:', array([  9.78000354,  17.16658946]))
         421355 function calls (414572 primitive calls) in 0.694 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 <string>:1(ArgInfo)
        1    0.000    0.000    0.000    0.000 <string>:1(ArgSpec)
        1    0.000    0.000    0.0
**********************************************************************

Code ran without errors

Time consumed = 3.50924s

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
"""Similar to LV1.py however takes parameter values as user input through terminal and saves result in PDF in Results"""

__author__ = 'Matthew Campos (matthew.campos19@imperial.ac.uk)'
__version__ = '0.0.1'

def main(argv):
    """ Main entry point of the program """
    import scipy as sc
    import scipy.integrate as integrate
    import matplotlib.pylab as p

    def dCR_dt(pops, t=0):
        """returns the growth rate of consumer and resource population at any given time step"""

        R = pops[0]
        C = pops[1]
        K = 10000000
        dRdt = r * R * (1-(R/K)) - a * R * C
        dCdt = -z * C + e * a * R * C

        return sc.array([dRdt, dCdt])

    #integrate from time point 0 to 15, using 1000 sub-divisions of time
    t = sc.linspace(0, 15, 1000)

    def plot(pops):
        f1 = p.figure()
        p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
        p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
        p.grid()
        p.legend(loc='best')
        p.xlabel('Time')
        p.ylabel('Population density')
        p.title('Consumer-Resource population dynamics')
        #p.show()# To display the figure
        f1.savefig('../Results/LV2_model.pdf')

        f2 = p.figure()
        p.plot(pops[:,0], pops[:,1], 'r-', label='Consumer density') # Plot
        p.grid()
        p.xlabel('Resource Density')
        p.ylabel('Consumer density')
        p.title('Consumer-Resource population dynamics')
        #p.show()# To display the figure
        f2.savefig('../Results/LV2_second_model.pdf')

        return f1,f2

    if len(argv) < 5:
        r = 1
        a = 0.1
        z = 1.5
        e = 0.75
    else:
        r,a,z,e = float(sys.argv[1]), float(sys.argv[2]), float(sys.argv[3]), float(sys.argv[4])
    #integrate from time point 0 to 15, using 1000 sub-divisions of time
    t = sc.linspace(0, 15, 1000)
    #Set the initial conditions for the two populations
    R0 = 10
    C0 = 5
    RC0 = sc.array([R0, C0])
    #numerically integrate this system forward from those starting conditions
    pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
    print("final Consumer and Resource population values are:", pops[-1]) #prints final values
    plot(pops)
    return 0

if __name__ == "__main__":
    """Makes sure the main function is called from command line"""
    import sys
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
final Consumer and Resource population values are: [  9.78018882  17.16654397]

**********************************************************************

Code ran without errors

Time consumed = 0.80906s

======================================================================
======================================================================
Finished running scripts

Ran into 3 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 98

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!